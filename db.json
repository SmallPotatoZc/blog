{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/progress/bg.png","path":"progress/bg.png","modified":1,"renderable":0},{"_id":"source/img/hoisting-variable.png","path":"img/hoisting-variable.png","modified":1,"renderable":0},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/chao.ico","path":"img/chao.ico","modified":1,"renderable":1},{"_id":"themes/material/source/img/zc.jpg","path":"img/zc.jpg","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1487692586000},{"_id":"themes/material/.npmignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1504763083000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1487692586000},{"_id":"themes/material/README.md","hash":"6bf685209fdfb28d6e3bbf990f2c119925ada81d","modified":1504763145000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1487244609000},{"_id":"themes/material/_config.template.yml","hash":"4d27886927d734da2c0d7767dbc6050f520e7389","modified":1504767082000},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1487244609000},{"_id":"themes/material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1504763083000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1491294414000},{"_id":"themes/material/package.json","hash":"082ad8265b9f8764f9e3e1656a4ad6e1de00d6a5","modified":1504763083000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1487692586000},{"_id":"themes/material/_config.yml","hash":"74b314255834f9c28923445ea8547f48eb934040","modified":1513138850000},{"_id":"source/_posts/Chrome.md","hash":"8f1394251d4ef17d9399d5d0823ab1b4ee5a7802","modified":1508912838000},{"_id":"source/_posts/Hoisting-In-JavaScript.md","hash":"de5b72687a6e23cbed26b959d1cdf3d76b180e80","modified":1513073428000},{"_id":"source/_posts/Promises-Async-Await.md","hash":"aac745eba7a0508737fc4c4a108850ed97db735c","modified":1513216550000},{"_id":"source/_posts/learn-typescript.md","hash":"acef7a1ef4ef07b68a3109e617587d5242e02c67","modified":1516950609000},{"_id":"source/_posts/interview-js.md","hash":"34c146e8741ae9abc8f18a0a4e75c694c42ae0cd","modified":1515813518000},{"_id":"source/_posts/interview.md","hash":"e36bd0980954932d1790a9b64155024969bb61a0","modified":1515812481000},{"_id":"source/progress/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1510655839000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1505394051000},{"_id":"source/_posts/cookie.md","hash":"6c2edd7522ff9fe8bf794391b2f3b0f9216c16b7","modified":1508735147000},{"_id":"source/progress/index.md","hash":"df8b92434f70763dbddbcf221901f1b929bd60c8","modified":1512468549000},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1504763083000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1493443791000},{"_id":"themes/material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1504763083000},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1504763083000},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1504763083000},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1504763083000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1493443791000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1493443791000},{"_id":"themes/material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1504763083000},{"_id":"themes/material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1504763083000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1493443791000},{"_id":"source/img/hoisting-variable.png","hash":"0ad3192d2bfad777c88f2384c80d5f7e8e4e1fd2","modified":1513070621000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487244609000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1491715225000},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1493443791000},{"_id":"themes/material/layout/post.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1493443791000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493443791000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1504763083000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1504763083000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"e1d9c58890b92083021c7774ccc815fd59b83081","modified":1504763083000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1504763083000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1504763083000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1504763083000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1493484084000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1487244609000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"4dd5e0658a3e75d29c9abbde83a0ba075e53a322","modified":1504763083000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1504763083000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1504763083000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1504763083000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1493484084000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1504763083000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1493443791000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"21d81212fe0e5b82e737fdc1f47bf434b4cebb4b","modified":1504763083000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1493443791000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"fe15fd0b2afc672cae2bb964518a46939b7f49d1","modified":1504763083000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1504763083000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1504763083000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1504763083000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1491294414000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1504763083000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"e737dbab7bba9907eb46b92c32794bbeebb8e1e1","modified":1508053357000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1487244609000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1493443901000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1504763083000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1504763083000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1504763083000},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1504763083000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1493443791000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1491294414000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1504763083000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1504763083000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"4e8ac43adea1833407d06e1aa3ca340f91c065e0","modified":1504763083000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1493443791000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1493443791000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1493443791000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1493443791000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1487244609000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1504763083000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1493443791000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1493443791000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1504763083000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1493443791000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1493443791000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1493443791000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1504763083000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1487244609000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1493443791000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496316325000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1487244609000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1491294414000},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1504763083000},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1504763083000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1487244609000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1493443791000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1493443791000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1487244609000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1487244609000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1487244609000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1491715210000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1487244609000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1487244609000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1487244609000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1491294414000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1490883710000},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1504763083000},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1504763083000},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1504763083000},{"_id":"themes/material/source/img/chao.ico","hash":"c41d23dcd40cc8fa7668257094d72be6621f49d1","modified":1505380223000},{"_id":"themes/material/source/img/zc.jpg","hash":"50dc604e3db09ddfbd94401a025c3b0a1d6cb677","modified":1505563354000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1491294414000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1491294414000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1487692586000},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1504763083000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1504763083000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1487692586000},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1504763083000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1491715225000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1493443791000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1491294414000},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1504763083000},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1504763083000},{"_id":"themes/material/source/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1504763083000},{"_id":"themes/material/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1504763083000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1487244609000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496316325000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496316325000},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1504763083000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1491294414000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1487244609000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1504763083000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1504763083000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1504763083000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1504763083000},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1504763083000},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1504763083000},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1504763083000},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1504763083000},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1504763083000},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1504763083000},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1504763083000},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1504763083000},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1504763083000},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1504763083000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496316325000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1487244609000},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1504763083000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496316325000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496316325000},{"_id":"themes/material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1504763083000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1504763083000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1491294414000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1491294414000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1487244609000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1487244609000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1487244609000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1491294414000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1491294414000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1491294414000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1491294414000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1491294414000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1491294414000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1491294414000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1491294414000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1491294414000},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504763083000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1491294414000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1491294414000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1491294414000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1491294414000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1487244609000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1491294414000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1487244609000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1487244609000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1491294414000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1491294414000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1496316325000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"083154d9c280898c00fe7521e9848018f86ec7c5","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1493484084000},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"9faea95d6509415223d450032352d55d022733a1","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"338b60e1f5542d2e8d7ba999c2fa58ab4bc066dd","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"94e2e6062df9b74e9fcee816fa019776b06712c2","modified":1504763083000},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"2ae3985f13173acccb4020d14bab0d70d6da12d5","modified":1504763083000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1491294414000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496316325000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1487244609000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1487244609000},{"_id":"public/progress/index.html","hash":"a0ee16c39e7846a914de514955cdec2eb280cf1b","modified":1516950719576},{"_id":"public/2017/12/12/Hoisting-In-JavaScript/index.html","hash":"337d53c0fb8f72e673bf0a0bd0c5da5c1d516c63","modified":1516950719632},{"_id":"public/2017/10/25/Chrome/index.html","hash":"f97f6b75b9d6ad7c4e3ba03f623bd6c6796a829a","modified":1516950719634},{"_id":"public/2017/10/11/cookie/index.html","hash":"ddb22cce66f5ccbfcfabdabdcf3e2ee716b1b8db","modified":1516950719634},{"_id":"public/2017/09/14/hello-world/index.html","hash":"041c23354036e8ec93378b436396da7dbd491372","modified":1516950719634},{"_id":"public/index.html","hash":"3d2aea68b8665cef8d890f4d5c8e97f51bc82443","modified":1516950719634},{"_id":"public/archives/index.html","hash":"87259f7ce3df39d103b948eb21fd7a15a52c55c0","modified":1516950719634},{"_id":"public/archives/2017/index.html","hash":"f61da7c9998a030ddbef43d51b16425a522960e5","modified":1516950719634},{"_id":"public/archives/2017/09/index.html","hash":"ff9538ea0bdf038be77325fe722ed384ed7b0af5","modified":1516950719634},{"_id":"public/archives/2017/10/index.html","hash":"9b65b2455eedf4cb8df867d95f73d83434412ee4","modified":1516950719634},{"_id":"public/archives/2017/12/index.html","hash":"900b5dea4021e73ab641e0d0529f88cb2fd335c2","modified":1516950719634},{"_id":"public/2018/01/26/learn-typescript/index.html","hash":"b7959c9d162f96a84a1035eecea4cf38a2e80126","modified":1516950719642},{"_id":"public/2018/01/12/interview/index.html","hash":"38fdbe35201416eb1014cf7ff5849bab5a5e1f1e","modified":1516950719642},{"_id":"public/2018/01/10/interview-js/index.html","hash":"f399a5f9fc918b7716eb1198ab4331abf9bacfb9","modified":1516950719642},{"_id":"public/2017/12/13/Promises-Async-Await/index.html","hash":"7d7ff7065d89ae6a2c43a661e216f28fcaaf679b","modified":1516950719642},{"_id":"public/tags/面试/index.html","hash":"62dc6d53318d00e8ffeb58bb7221365af6085db9","modified":1516950719642},{"_id":"public/archives/2018/index.html","hash":"c8d82d0f48aced24d6f0f03bfe90a762b85440e1","modified":1516950719642},{"_id":"public/archives/2018/01/index.html","hash":"cb1164a8858001067bdf56f05ed2899162456610","modified":1516950719642},{"_id":"public/progress/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1516950719648},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1516950719648},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1516950719649},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1516950719649},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1516950719649},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1516950719649},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1516950719649},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1516950719649},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1516950719649},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1516950719649},{"_id":"public/img/chao.ico","hash":"c41d23dcd40cc8fa7668257094d72be6621f49d1","modified":1516950719649},{"_id":"public/img/zc.jpg","hash":"50dc604e3db09ddfbd94401a025c3b0a1d6cb677","modified":1516950719649},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1516950719650},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1516950719650},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1516950719650},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1516950719650},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1516950719650},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1516950719650},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1516950719650},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1516950719650},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1516950719650},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1516950719650},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1516950719650},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1516950719650},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1516950719650},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1516950719650},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1516950719650},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1516950719650},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1516950719650},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1516950719650},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1516950719650},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1516950719651},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1516950719651},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1516950719651},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1516950719651},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1516950719651},{"_id":"public/img/hoisting-variable.png","hash":"0ad3192d2bfad777c88f2384c80d5f7e8e4e1fd2","modified":1516950719656},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1516950719657},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516950719662},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516950719662},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1516950719662},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1516950719662},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1516950719662},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1516950719663},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1516950719663},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1516950719663},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1516950719663},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1516950719663},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1516950719663},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1516950719663},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1516950719663},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1516950719667},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1516950719667},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1516950719667},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1516950719667},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1516950719667},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1516950719667},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1516950719667},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1516950719667},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1516950719667},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1516950719667},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1516950719667},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1516950719667},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1516950719667},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1516950719667},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1516950719667},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1516950719667},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1516950719668},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1516950719668},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1516950719668},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1516950719668},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1516950719668},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1516950719668},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1516950719668},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1516950719668},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1516950719668},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1516950719668},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1516950719668},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1516950719668},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1516950719668},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1516950719668},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1516950719668},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1516950719668},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1516950719668},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1516950719668},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1516950719668},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1516950719668},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1516950719668},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1516950719669},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1516950719669},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1516950719669},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1516950719669},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1516950719669},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1516950719669},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1516950719669},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1516950719669},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1516950719669},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1516950719669},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1516950719669},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1516950719669},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1516950719669},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516950719669},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1516950719670},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1516950719670},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1516950719670},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1516950719670},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1516950719670},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1516950719670},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1516950719670},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1516950719670},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1516950719671},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1516950719671},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1516950719671},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1516950719671},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516950719671},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516950719671},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516950719671},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516950719865},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1516950719918},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1516950719918},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1516950719918},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1516950719919},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1516950719919},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1516950719921}],"Category":[],"Data":[],"Page":[{"title":"progress","date":"2017-11-14T03:09:59.000Z","_content":"# 2017工作内容\n<table>\n  <colgroup>\n    <col width=\"20%\"/><col width=\"60%\"/><col width=\"20%\"/>\n  </colgroup>\n  <tr>\n    <th>日期</th> <th>工作内容</th> <th>备注</th>\n  </tr>\n  <tr>\n    <td>10-30—11-05</td>\n    <td>\n      <ol>\n        <li>在班牌项目中实现了gulp打包压缩，减少模式切换的时</li>\n        <li>对接门禁系统的测试</li>\n        <li>郑州八中项目部分班牌连接不上服务器问题的排查（未找到原因）</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-06—11-12</td>\n    <td>\n      <ol>\n        <li>班牌开关机功能异常的排查与解决</li>\n        <li>安装工具添加安装输入法的功能</li>\n        <li>环博软件对接-单点登录的软件设计</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-13—11-19</td>\n    <td>\n      <ol>\n        <li>班牌安装工具添加校时功能和查看版本信息（包含apk和应用）</li>\n        <li>测试新版apk的音量调节功能</li>\n        <li>projeceSchool中的图片懒加载及占位显示</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-20—11-26</td>\n    <td>\n      <ol>\n        <li>优化工具校时的功能(未完成)</li>\n        <li>门禁系统AccessControl</li>\n        <li>拍照花屏的排查</li>\n        <li>拍照的测试应用a</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-27—12-3</td>\n    <td>\n      <ol>\n        <li>测试门禁系统</li>\n        <li>工具中校时功能bug的修复</li>\n        <li>班牌模式切换时间长的原因排查，原因：页面的重复加载 --> 点击切换函数的错误导致</li>\n        <li>修改video的测试应用</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>12-3—12-9</td>\n    <td>\n      <ol>\n        <li>微信视频播放的控制(未解决),微信内部做的处理,解决预计所需时间太长</li>\n      </ol>\n    </td>\n    <td>···</td>\n  </tr>\n</table>\n","source":"progress/index.md","raw":"---\ntitle: progress\ndate: 2017-11-14 11:09:59\n---\n# 2017工作内容\n<table>\n  <colgroup>\n    <col width=\"20%\"/><col width=\"60%\"/><col width=\"20%\"/>\n  </colgroup>\n  <tr>\n    <th>日期</th> <th>工作内容</th> <th>备注</th>\n  </tr>\n  <tr>\n    <td>10-30—11-05</td>\n    <td>\n      <ol>\n        <li>在班牌项目中实现了gulp打包压缩，减少模式切换的时</li>\n        <li>对接门禁系统的测试</li>\n        <li>郑州八中项目部分班牌连接不上服务器问题的排查（未找到原因）</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-06—11-12</td>\n    <td>\n      <ol>\n        <li>班牌开关机功能异常的排查与解决</li>\n        <li>安装工具添加安装输入法的功能</li>\n        <li>环博软件对接-单点登录的软件设计</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-13—11-19</td>\n    <td>\n      <ol>\n        <li>班牌安装工具添加校时功能和查看版本信息（包含apk和应用）</li>\n        <li>测试新版apk的音量调节功能</li>\n        <li>projeceSchool中的图片懒加载及占位显示</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-20—11-26</td>\n    <td>\n      <ol>\n        <li>优化工具校时的功能(未完成)</li>\n        <li>门禁系统AccessControl</li>\n        <li>拍照花屏的排查</li>\n        <li>拍照的测试应用a</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-27—12-3</td>\n    <td>\n      <ol>\n        <li>测试门禁系统</li>\n        <li>工具中校时功能bug的修复</li>\n        <li>班牌模式切换时间长的原因排查，原因：页面的重复加载 --> 点击切换函数的错误导致</li>\n        <li>修改video的测试应用</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>12-3—12-9</td>\n    <td>\n      <ol>\n        <li>微信视频播放的控制(未解决),微信内部做的处理,解决预计所需时间太长</li>\n      </ol>\n    </td>\n    <td>···</td>\n  </tr>\n</table>\n","updated":"2017-12-05T10:09:09.000Z","path":"progress/index.html","comments":1,"layout":"page","_id":"cjcvlah9c0001ucxbcbvglz84","content":"<h1 id=\"2017工作内容\"><a class=\"markdownIt-Anchor\" href=\"#2017工作内容\"></a> 2017工作内容</h1>\n<table>\n  <colgroup>\n    <col width=\"20%\"><col width=\"60%\"><col width=\"20%\">\n  </colgroup>\n  <tr>\n    <th>日期</th> <th>工作内容</th> <th>备注</th>\n  </tr>\n  <tr>\n    <td>10-30—11-05</td>\n    <td>\n      <ol>\n        <li>在班牌项目中实现了gulp打包压缩，减少模式切换的时</li>\n        <li>对接门禁系统的测试</li>\n        <li>郑州八中项目部分班牌连接不上服务器问题的排查（未找到原因）</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-06—11-12</td>\n    <td>\n      <ol>\n        <li>班牌开关机功能异常的排查与解决</li>\n        <li>安装工具添加安装输入法的功能</li>\n        <li>环博软件对接-单点登录的软件设计</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-13—11-19</td>\n    <td>\n      <ol>\n        <li>班牌安装工具添加校时功能和查看版本信息（包含apk和应用）</li>\n        <li>测试新版apk的音量调节功能</li>\n        <li>projeceSchool中的图片懒加载及占位显示</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-20—11-26</td>\n    <td>\n      <ol>\n        <li>优化工具校时的功能(未完成)</li>\n        <li>门禁系统AccessControl</li>\n        <li>拍照花屏的排查</li>\n        <li>拍照的测试应用a</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-27—12-3</td>\n    <td>\n      <ol>\n        <li>测试门禁系统</li>\n        <li>工具中校时功能bug的修复</li>\n        <li>班牌模式切换时间长的原因排查，原因：页面的重复加载 --> 点击切换函数的错误导致</li>\n        <li>修改video的测试应用</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>12-3—12-9</td>\n    <td>\n      <ol>\n        <li>微信视频播放的控制(未解决),微信内部做的处理,解决预计所需时间太长</li>\n      </ol>\n    </td>\n    <td>···</td>\n  </tr>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2017工作内容\"><a class=\"markdownIt-Anchor\" href=\"#2017工作内容\"></a> 2017工作内容</h1>\n<table>\n  <colgroup>\n    <col width=\"20%\"><col width=\"60%\"><col width=\"20%\">\n  </colgroup>\n  <tr>\n    <th>日期</th> <th>工作内容</th> <th>备注</th>\n  </tr>\n  <tr>\n    <td>10-30—11-05</td>\n    <td>\n      <ol>\n        <li>在班牌项目中实现了gulp打包压缩，减少模式切换的时</li>\n        <li>对接门禁系统的测试</li>\n        <li>郑州八中项目部分班牌连接不上服务器问题的排查（未找到原因）</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-06—11-12</td>\n    <td>\n      <ol>\n        <li>班牌开关机功能异常的排查与解决</li>\n        <li>安装工具添加安装输入法的功能</li>\n        <li>环博软件对接-单点登录的软件设计</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-13—11-19</td>\n    <td>\n      <ol>\n        <li>班牌安装工具添加校时功能和查看版本信息（包含apk和应用）</li>\n        <li>测试新版apk的音量调节功能</li>\n        <li>projeceSchool中的图片懒加载及占位显示</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-20—11-26</td>\n    <td>\n      <ol>\n        <li>优化工具校时的功能(未完成)</li>\n        <li>门禁系统AccessControl</li>\n        <li>拍照花屏的排查</li>\n        <li>拍照的测试应用a</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>11-27—12-3</td>\n    <td>\n      <ol>\n        <li>测试门禁系统</li>\n        <li>工具中校时功能bug的修复</li>\n        <li>班牌模式切换时间长的原因排查，原因：页面的重复加载 --> 点击切换函数的错误导致</li>\n        <li>修改video的测试应用</li>\n      </ol>\n    </td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>12-3—12-9</td>\n    <td>\n      <ol>\n        <li>微信视频播放的控制(未解决),微信内部做的处理,解决预计所需时间太长</li>\n      </ol>\n    </td>\n    <td>···</td>\n  </tr>\n</table>\n"}],"Post":[{"title":"Chrome","date":"2017-10-25T06:01:56.000Z","_content":"# 内置控制台的使用\n1. 元素选择器\n```\n$ // 相当于 document.querySelector 。  \n$$ // 相当于 document.querySelectorAll 。  \n$_ // 返回上一个表达式的值  \n$0-$4 // 返回最近5个Elements面板选中的DOM元素。  \ndir //  console.dir  \nkeys // 取对象的键名, 返回键名组成的数组  \nvalues // 去对象的值, 返回值组成的数组\n方向键盘的上下键\ncopy(content)  // 将content（也可以说是content）复制到剪贴板\n``` \n2. [console](http://www.cnblogs.com/SmallPotatoIT/p/5906298.html)\n3. 让页面进入编辑模式\n`document.body.contentEditable=true`\n4. 打开命令菜单\n按Cmd + Shift + P（Mac）或Ctrl + Shift + P（Windows，Linux）打开命令菜单。\n[chrome开发者工具文档](http://www.css88.com/doc/chrome-devtools/)\n原文: http://ghmagical.com/article/page/id/KLAnkBDoUFygghmagical.com","source":"_posts/Chrome.md","raw":"---\ntitle: Chrome\ndate: 2017-10-25 14:01:56\ntags:\n---\n# 内置控制台的使用\n1. 元素选择器\n```\n$ // 相当于 document.querySelector 。  \n$$ // 相当于 document.querySelectorAll 。  \n$_ // 返回上一个表达式的值  \n$0-$4 // 返回最近5个Elements面板选中的DOM元素。  \ndir //  console.dir  \nkeys // 取对象的键名, 返回键名组成的数组  \nvalues // 去对象的值, 返回值组成的数组\n方向键盘的上下键\ncopy(content)  // 将content（也可以说是content）复制到剪贴板\n``` \n2. [console](http://www.cnblogs.com/SmallPotatoIT/p/5906298.html)\n3. 让页面进入编辑模式\n`document.body.contentEditable=true`\n4. 打开命令菜单\n按Cmd + Shift + P（Mac）或Ctrl + Shift + P（Windows，Linux）打开命令菜单。\n[chrome开发者工具文档](http://www.css88.com/doc/chrome-devtools/)\n原文: http://ghmagical.com/article/page/id/KLAnkBDoUFygghmagical.com","slug":"Chrome","published":1,"updated":"2017-10-25T06:27:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah980000ucxbkje12b8y","content":"<h1 id=\"内置控制台的使用\"><a class=\"markdownIt-Anchor\" href=\"#内置控制台的使用\"></a> 内置控制台的使用</h1>\n<ol>\n<li>元素选择器</li>\n</ol>\n<pre class=\"highlight\"><code class=\"\">$ // 相当于 document.querySelector 。  \n$$ // 相当于 document.querySelectorAll 。  \n$_ // 返回上一个表达式的值  \n$0-$4 // 返回最近5个Elements面板选中的DOM元素。  \ndir //  console.dir  \nkeys // 取对象的键名, 返回键名组成的数组  \nvalues // 去对象的值, 返回值组成的数组\n方向键盘的上下键\ncopy(content)  // 将content（也可以说是content）复制到剪贴板\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"http://www.cnblogs.com/SmallPotatoIT/p/5906298.html\" target=\"_blank\" rel=\"noopener\">console</a></li>\n<li>让页面进入编辑模式<br>\n<code>document.body.contentEditable=true</code></li>\n<li>打开命令菜单<br>\n按Cmd + Shift + P（Mac）或Ctrl + Shift + P（Windows，Linux）打开命令菜单。<br>\n<a href=\"http://www.css88.com/doc/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">chrome开发者工具文档</a><br>\n原文: <a href=\"http://ghmagical.com/article/page/id/KLAnkBDoUFygghmagical.com\" target=\"_blank\" rel=\"noopener\">http://ghmagical.com/article/page/id/KLAnkBDoUFygghmagical.com</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内置控制台的使用\"><a class=\"markdownIt-Anchor\" href=\"#内置控制台的使用\"></a> 内置控制台的使用</h1>\n<ol>\n<li>元素选择器</li>\n</ol>\n<pre class=\"highlight\"><code class=\"\">$ // 相当于 document.querySelector 。  \n$$ // 相当于 document.querySelectorAll 。  \n$_ // 返回上一个表达式的值  \n$0-$4 // 返回最近5个Elements面板选中的DOM元素。  \ndir //  console.dir  \nkeys // 取对象的键名, 返回键名组成的数组  \nvalues // 去对象的值, 返回值组成的数组\n方向键盘的上下键\ncopy(content)  // 将content（也可以说是content）复制到剪贴板\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"http://www.cnblogs.com/SmallPotatoIT/p/5906298.html\" target=\"_blank\" rel=\"noopener\">console</a></li>\n<li>让页面进入编辑模式<br>\n<code>document.body.contentEditable=true</code></li>\n<li>打开命令菜单<br>\n按Cmd + Shift + P（Mac）或Ctrl + Shift + P（Windows，Linux）打开命令菜单。<br>\n<a href=\"http://www.css88.com/doc/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">chrome开发者工具文档</a><br>\n原文: <a href=\"http://ghmagical.com/article/page/id/KLAnkBDoUFygghmagical.com\" target=\"_blank\" rel=\"noopener\">http://ghmagical.com/article/page/id/KLAnkBDoUFygghmagical.com</a></li>\n</ol>\n"},{"title":"Hoisting In JavaScript","date":"2017-12-12T08:18:22.000Z","_content":"> 文章来源：https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-order-of-precedence\n\n\bJavaScript\b中的变量提升\n# undefined vs ReferenceError\n```\n// 未声明的变量在执行时会被赋值undefined\nconsole.log(typeof variable); // Output: undefined\n// 在调用未赋值的变量时，会抛出ReferenceError\nconsole.log(variable); // Output: ReferenceError: variable is not defined\n```\n# Hoisting variables(变量提升)\nJS生命周期图\n<img src=\"/img/hoisting-variable.png\" style=\"width:50%;\" />\n```\n// 包含变量的生命和变量的初始化\nvar a = 100;\n\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a); // Output: 20\n\nconsole.log(b); // Output: ReferenceError: b is not defined\n/*\nvar b ; b 在 hoist() 的scope中\n不能\b在hoist()\b之外打印b\n*/\n```\n# 变量声明\n## ES5(var)\n","source":"_posts/Hoisting-In-JavaScript.md","raw":"---\ntitle: Hoisting In JavaScript\ndate: 2017-12-12 16:18:22\ntags:\n---\n> 文章来源：https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-order-of-precedence\n\n\bJavaScript\b中的变量提升\n# undefined vs ReferenceError\n```\n// 未声明的变量在执行时会被赋值undefined\nconsole.log(typeof variable); // Output: undefined\n// 在调用未赋值的变量时，会抛出ReferenceError\nconsole.log(variable); // Output: ReferenceError: variable is not defined\n```\n# Hoisting variables(变量提升)\nJS生命周期图\n<img src=\"/img/hoisting-variable.png\" style=\"width:50%;\" />\n```\n// 包含变量的生命和变量的初始化\nvar a = 100;\n\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a); // Output: 20\n\nconsole.log(b); // Output: ReferenceError: b is not defined\n/*\nvar b ; b 在 hoist() 的scope中\n不能\b在hoist()\b之外打印b\n*/\n```\n# 变量声明\n## ES5(var)\n","slug":"Hoisting-In-JavaScript","published":1,"updated":"2017-12-12T10:10:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9d0002ucxbm8zw9lfy","content":"<blockquote>\n<p>文章来源：<a href=\"https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-order-of-precedence\" target=\"_blank\" rel=\"noopener\">https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-order-of-precedence</a></p>\n</blockquote>\n<p>\bJavaScript\b中的变量提升</p>\n<h1 id=\"undefined-vs-referenceerror\"><a class=\"markdownIt-Anchor\" href=\"#undefined-vs-referenceerror\"></a> undefined vs ReferenceError</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 未声明的变量在执行时会被赋值undefined</span><br><span class=\"line\">console.log(typeof variable); // Output: undefined</span><br><span class=\"line\">// 在调用未赋值的变量时，会抛出ReferenceError</span><br><span class=\"line\">console.log(variable); // Output: ReferenceError: variable is not defined</span><br></pre></td></tr></table></figure>\n<h1 id=\"hoisting-variables变量提升\"><a class=\"markdownIt-Anchor\" href=\"#hoisting-variables变量提升\"></a> Hoisting variables(变量提升)</h1>\n<p>JS生命周期图<br>\n<img src=\"/img/hoisting-variable.png\" style=\"width:50%;\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 包含变量的生命和变量的初始化</span><br><span class=\"line\">var a = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">function hoist() &#123;</span><br><span class=\"line\">  a = 20;</span><br><span class=\"line\">  var b = 100;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoist();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a); // Output: 20</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b); // Output: ReferenceError: b is not defined</span><br><span class=\"line\">/*</span><br><span class=\"line\">var b ; b 在 hoist() 的scope中</span><br><span class=\"line\">不能\b在hoist()\b之外打印b</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h1 id=\"变量声明\"><a class=\"markdownIt-Anchor\" href=\"#变量声明\"></a> 变量声明</h1>\n<h2 id=\"es5var\"><a class=\"markdownIt-Anchor\" href=\"#es5var\"></a> ES5(var)</h2>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>文章来源：<a href=\"https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-order-of-precedence\" target=\"_blank\" rel=\"noopener\">https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-order-of-precedence</a></p>\n</blockquote>\n<p>\bJavaScript\b中的变量提升</p>\n<h1 id=\"undefined-vs-referenceerror\"><a class=\"markdownIt-Anchor\" href=\"#undefined-vs-referenceerror\"></a> undefined vs ReferenceError</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 未声明的变量在执行时会被赋值undefined</span><br><span class=\"line\">console.log(typeof variable); // Output: undefined</span><br><span class=\"line\">// 在调用未赋值的变量时，会抛出ReferenceError</span><br><span class=\"line\">console.log(variable); // Output: ReferenceError: variable is not defined</span><br></pre></td></tr></table></figure>\n<h1 id=\"hoisting-variables变量提升\"><a class=\"markdownIt-Anchor\" href=\"#hoisting-variables变量提升\"></a> Hoisting variables(变量提升)</h1>\n<p>JS生命周期图<br>\n<img src=\"/img/hoisting-variable.png\" style=\"width:50%;\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 包含变量的生命和变量的初始化</span><br><span class=\"line\">var a = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">function hoist() &#123;</span><br><span class=\"line\">  a = 20;</span><br><span class=\"line\">  var b = 100;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoist();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a); // Output: 20</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b); // Output: ReferenceError: b is not defined</span><br><span class=\"line\">/*</span><br><span class=\"line\">var b ; b 在 hoist() 的scope中</span><br><span class=\"line\">不能\b在hoist()\b之外打印b</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h1 id=\"变量声明\"><a class=\"markdownIt-Anchor\" href=\"#变量声明\"></a> 变量声明</h1>\n<h2 id=\"es5var\"><a class=\"markdownIt-Anchor\" href=\"#es5var\"></a> ES5(var)</h2>\n"},{"title":"Promises, Async/Await","date":"2017-12-13T04:42:25.000Z","_content":"> 文章来源：https://javascript.info/callbacks\n\n# JavaScript 中的callbacks\n在javascript中大多数的行为都是异步的。如下：loadScript(src)\n```js\nfunction loadScript(src) {\n  let script = document.createElement('script');\n  script.src = src;\n  document.head.append(script);\n}\n```\n\n上述函数的目的是加载个新的script元素。在document增加`<script src=\"...\">`后，浏览器将要加载并执行它。\n我们可以向下面所示使用它：\n```js\n// loads and executes\nloadScript('/my/script.js');\n```\n\n这个函数被称为“asynchronous”，因为script的加载是在函数执行之后完成的。\n","source":"_posts/Promises-Async-Await.md","raw":"---\ntitle: 'Promises, Async/Await'\ndate: 2017-12-13 12:42:25\ntags:\n---\n> 文章来源：https://javascript.info/callbacks\n\n# JavaScript 中的callbacks\n在javascript中大多数的行为都是异步的。如下：loadScript(src)\n```js\nfunction loadScript(src) {\n  let script = document.createElement('script');\n  script.src = src;\n  document.head.append(script);\n}\n```\n\n上述函数的目的是加载个新的script元素。在document增加`<script src=\"...\">`后，浏览器将要加载并执行它。\n我们可以向下面所示使用它：\n```js\n// loads and executes\nloadScript('/my/script.js');\n```\n\n这个函数被称为“asynchronous”，因为script的加载是在函数执行之后完成的。\n","slug":"Promises-Async-Await","published":1,"updated":"2017-12-14T01:55:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9f0003ucxbgnvlj3gs","content":"<blockquote>\n<p>文章来源：<a href=\"https://javascript.info/callbacks\" target=\"_blank\" rel=\"noopener\">https://javascript.info/callbacks</a></p>\n</blockquote>\n<h1 id=\"javascript-中的callbacks\"><a class=\"markdownIt-Anchor\" href=\"#javascript-中的callbacks\"></a> JavaScript 中的callbacks</h1>\n<p>在javascript中大多数的行为都是异步的。如下：loadScript(src)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  script.src = src;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述函数的目的是加载个新的script元素。在document增加<code>&lt;script src=&quot;...&quot;&gt;</code>后，浏览器将要加载并执行它。<br>\n我们可以向下面所示使用它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loads and executes</span></span><br><span class=\"line\">loadScript(<span class=\"string\">'/my/script.js'</span>);</span><br></pre></td></tr></table></figure>\n<p>这个函数被称为“asynchronous”，因为script的加载是在函数执行之后完成的。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>文章来源：<a href=\"https://javascript.info/callbacks\" target=\"_blank\" rel=\"noopener\">https://javascript.info/callbacks</a></p>\n</blockquote>\n<h1 id=\"javascript-中的callbacks\"><a class=\"markdownIt-Anchor\" href=\"#javascript-中的callbacks\"></a> JavaScript 中的callbacks</h1>\n<p>在javascript中大多数的行为都是异步的。如下：loadScript(src)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  script.src = src;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述函数的目的是加载个新的script元素。在document增加<code>&lt;script src=&quot;...&quot;&gt;</code>后，浏览器将要加载并执行它。<br>\n我们可以向下面所示使用它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loads and executes</span></span><br><span class=\"line\">loadScript(<span class=\"string\">'/my/script.js'</span>);</span><br></pre></td></tr></table></figure>\n<p>这个函数被称为“asynchronous”，因为script的加载是在函数执行之后完成的。</p>\n"},{"title":"learn-typescript(译)","date":"2018-01-26T07:09:03.000Z","_content":"\n> 原文链接[Learn TypeScript In 30 Minutes](https://tutorialzine.com/2016/07/learn-typescript-in-30-minutes)\n\n今天我们将要看一下 TypeScript，它被设计为想要构建大型和复杂应用的会被编译成 JavaScript 的一种语言。它继承了大量像 C# 和 Java 语言里面科学的概念，是它更加的轻松和成为了自由类型的 JavaScript。\n\n从技术上说，你不必去学习 TypeScript 也会成为一位很好的开发者。然而采用 TypeScript 也会有很多的好处：\n\n* 由于这个静态类型，在 TypeScript 中的代码更加的具有可预测性，和更加容易查找漏洞。\n* 由于这个 模块、命名空间和完全的面向对象支持，可以在大型和复杂项目中更加容易组织代码。\n* TypeScript 编译成 JavaScript 有复杂的步骤，这可以在运行代码前捕获各种类型的错误。\n* 这 Angular2 采用 TypeScript，它告诉我们使用在项目中使用这个语言更优。\n\n# 静态类型\n一个非常独特的功能是 TypeScript 支持静态类型。着意味着你可以为变量指明类型，并且编译器会确保它们会被赋予正确类型的值。如果变量没有被指明类型，它们将会从代码中推断类型。\n\n下面是一个例子。每一个变量，函数参数或者是函数的返回值在初始化时可以被定义类型：\n\n```ts\nvar burger: string = 'hamburger', // 字符串\n    calories: number = 300,  // 数值\n    tasty: boolean = true; // 布尔类型\n\n// 另外，币可以忽略这个类型的声明\n// var burger = 'hamburger';\n\n// 函数期望参数是一个字符串和整型\n// 函数自身的类型是 void ，因为它不会返回任何值\nfunction speak(food: string, energy: number): void {\n  console.log('Our ' + food + \" has\" + energy + 'calories');\n}\n\nspeak(burger, calories);\n```\n\n因为 TypeScript 被编译成了 JavaScript ，所以之后不会看到他们是什么类型，它们会被完全移除：\n\n```js\n// 上面 ts 编译成的 JavaScript 的代码\nvar burger = 'hamburger',\n    calories = 300,\n    tasty = true;\n\nfunction speak(food, energy) {\n  console.log('Our ' + food + ' has' + energy + ' calories');\n}\n\nspeak(burger, calories);\n```\n\n然而，如果我们尝试去做一些不合规范的事情，编译器`tsc`将会警告我们，在我们的代码中也会有错误提示。例如：\n\n```ts\n// 变量的类型是布尔值，但是赋予的值确实一个字符串\nvar tasty: boolean = \"I haven't tried it yet\";\n```\n\n> main.ts(1, 5): error TS2322: Type 'string' is not assignable to type 'boolean'.\n\n如果我们在函数参数中出现上述类似的情况，也会给出警告的：\n\n```ts\nfunction speak(food: string, energy: number): void {\n  console.log(\"Our \" + food + \" has\" + energy + \" calories\");\n}\n\n// 赋予参数的值不能匹配定义参数的类型\nspeak(\"tripple cheesburger\", \"a ton of\");\n```\n\n> main.ts(5, 30): error TS2345: Argument of type 'string' is not assignable to parmeter of type 'number'.\n\n下面是一些常用的数据类型：\n* 数值(number) - 所有数字通过`number`类型来定义，它包括整型，浮点型和其它的数值类型。\n* 字符(string) - 这个文本类型，就像被单引号和双引号包裹的字符串。\n* 布尔(boolean) - `true`或者`false`，使用 0 和 1 将会造成编译错误。\n* 任意(any) - 用这个类型的变量，可以被赋值字符串，数字，等等其它任何类型的值。\n* 数组(Array) - 有两种声明的方法：`my_arr: number[]`或者`my_arr: Array<number>`。\n* 空(void) - 使用在函数没有任何值返回时。\n\n想看到所有类型，请点击直达[点我](http://www.typescriptlang.org/docs/handbook/basic-types.html) \n\n# 接口\n\n接口用来进行类型检测，即一个对象是否符合结构。通过定义接口，我们可以命名特定变量的组合，确保它们总是在一块的。当转化成 JavaScript ，接口会消失 - 它们仅有的目的就是在开发中提供帮助。\n\n在下面的例子中，我们定义了一个简单的为了函数参数的类型检测：\n\n```ts\n// 下面我们定义了我们的 Food 接口，它的属性和类型。\ninterface Food {\n  name: string;\n  calories: number;\n}\n\n// 我们告诉我们的函数期望到接口结构的参数\n// 我们可以知道我们需要的属性将要总是会得到\nfunction speak(food: Food): void {\n  console.log(\"Our \" + food.name + \" has\" + food.calories + \" calories\");\n}\n\n// 我们定义一个对象，这个对象将会有 Food 中定义的所有属性。\n// 注意类型将会自动的识别\nvar ice_cream = {\n  name: \"ice cream\",\n  calories: 200\n}\n\nspeak(ice_cream);\n```\n\n这个属性的顺序无关紧要。我们仅仅需要被要求的属性值能够传入并有正确的类型。如果丢失一些东西，或者是错误类型参数值，更或者属性名错误，这个编译器将要警告我们。\n\n```ts\ninterface Food {\n  name: string;\n  calories: number;\n}\n\nfunction speak(food: Food): void {\n  console.log(\"Our \" + food.name + \" has\" + food.calories + \" grams.\");\n}\n\n// 我们做了一个故意的错误，这个 name 被错误拼写成了 nmae。\nvar ice_cream = {\n  nmae: \"ice cream\",\n  calories: 200\n}\n\nspeak(ice_cream);\n```\n\n> XX.ts(nn, nn): error TS2345: Argument of type `{nmae: string; calories: number; } is not assignable to parameter of type type 'Food'. property 'name' is missing in type '{nmae: string; calories: number; }'`.\n\n这只是一些入门的基础，所以我们没有涉及更多接口的细节。然而，这有比我们这提到的还要多的多的东西，所以我们建议你出门右转到 TypeScript 官方的文档 - [interfaces](http://www.typescriptlang.org/docs/handbook/interfaces.html)\n\n# 类\n当构造有个大型的应用时，程序的面向对象成为了大多数开发者的首选，特别是在 Java 或者 c# 。TypeScript 提供类的系统和它们是相似的，包括继承，抽象类，接口实现，setters/getters，等等。\n\n在最近的 JavaScript 版本(ECMAScript 2015)中也同样提到了这一点，类可以不借助 TypeScript 直接在 JavaScript 中使用。TypeScript 和 JavaScript 中类的实现是相似的但是也略有不同，TypeScript 更加的严格。\n\n接着上述采用 Food 为主题的思路，下面是一个简单的 TypeScript 的类：\n\n```ts\nclass Menu {\n  // 属性\n  // 默认的它们都是公共的，但是也可以设置为私有的。\n  items: Array<string>;\n  pages: number;\n\n  // 一个明确的构造\n  constructor(item_list: Array<string>, total_pages: number) {\n    // 这个 this 关键字是强制的\n    this.items = item_list;\n    this.pages = total_pages;\n  }\n\n  // 方法\n  list(): void {\n    console.log(\"Our menu for today\");\n    for(var i = 0; i < this.items.length; i ++) {\n      console.log(this.items[i]);\n    }\n  }\n}\n\n// 实例化这个 Menu 的类\nvar sundayMenu = new Menu([\"pancakes\", \"waffles\", \"orange juice\"], 1);\n\n// 调用这个实例的方法\nsundayMenu.list();\n```\n\n任何一个最近在写 Java 或者 C# 的人都应该发现这个语法是很相似的。这个相同体现在继承上：\n\n```ts\nclass HappyMeal extends Menu {\n  // 属性被继承\n  \n  // 一个新的构造必须被定义\n  constructor(item_list: Array<string>, total_pages: number) {\n    // 在这个例子中，我们想要和父级(Menu)一样的结构\n    // 为了自动拷贝这个，我们可以调用 super() - 一个指向父级 constructor 的引用\n    super(item_list, total_pages);\n  }\n\n  // 就像属性，方法也会继承父级的\n  // 然而，我们想要覆盖父级 list() 函数，所以我们重新定义了它\n  list(): void {\n    console.log(\"Our special menu for children\");\n    for(var i = 0; i < this.items.lengthl i ++) {\n      console.log(this.items[i]);\n    }\n  }\n}\n\n// 实例化 HappyMeal 类\nvar menu_for_children = new HappyMeal([\"candy\", \"drink\", \"toy\"], 1);\n\n// 这次的这个日志信息将会以特殊的介绍开始\nmenu_for_children.list();\n```\n\n对于在 TS 更加深层次的类，你可以读这个文档 - [走这](http://www.typescriptlang.org/docs/handbook/classes.html)\n\n# 泛型\n\n泛型是允许函数接受各种不同类型参数的模板。用泛型来创建重复使用的组件比使用`any`类型的数据类型更加好，泛型保留了变量的类型，既有它们已有的也有它们没有的。\n\n```ts\n// 函数名字后面跟着的这个 <T> 是一个泛型函数\n// 当我们调用这个函数时，每一个 <T> 的实例将会被当前提供的类型所替代。\n\n// 接收一个类型 T 的参数，\n// 返回一个类型 T 的数组。\n\nfunction genericFunc<T>(argument: T): T[] {\n  var arratOfT: T[] = []; // 创造空的类型 T 的数组。\n  arrayOfT.push(arguments); // Push, 现在 arrayOfT = [argument]。\n  return arrayOfT;\n}\n\nvar arrayFromString = genericFunc<string>(\"beep\");\nconsole.log(arrayFromString[0]); // \"beep\"\nconsole.log(typeof arrayFromString[0]); // String\n\nvar arrayFromNumber = genericFunc(42);\nconsole.log(arrayFromNumber[0]); // 42\nconsole.log(typeof arrayFromnumber[0]); // number\n```\n\n我们调用这个函数时，我们先手动设定了这个字符类型。编译器并不会得知，参数已经通过了和自动地匹配了类型，就像第二次被调用。既然不是强制的，每次提供类型是一个好的做法，这样在更加复杂的场景中编译器也不会推断正确的类型。\n\n这个 TypeScript 确实提供了一些包含泛型类的好例子，有结合接口实现的，还有等等其它的类型。你可以找到他们在这[探寻](http://www.typescriptlang.org/docs/handbook/generics.html)\n\n# 模块\n\n在构建大型应用的另一个重要的概念便是模块。相比较拥有 10000 行的代码来说，把你的代码分割成很多小的可复用的组件，可以帮助你的项目有组织性和可理解。\n\nTypeScript 介绍了一种导入和导出模块的语法，但是不能够操作文件之间的衔接。为了能够让可扩展的模块，TS依赖第三方的模块：浏览器端的[require.js](http://requirejs.org/) 和 Node.js 端的[CommonJS](https://en.wikipedia.org/wiki/CommonJS)。让我们看一下依赖于 require.js 的 TypeScript 简单例子。\n\n我们有两个文件。一个导出一个函数，另一个导入它并调用它。\n\n**export.ts**\n\n```ts\nvar sayzHi = function(): void {\n  console.log(\"Hello!\");\n}\n\nexport = sayHi;\n```\n\n**import.ts**\n\n```ts\nimport sayHi = require('./exporter');\nsayHi();\n```\n\n现在我们需要下载 require.js 并在 `\\<script\\>` 标签中引入它 - [怎么玩看这里](http://requirejs.org/docs/start.html)。这个最后一步就是编译我们的两个 ts 文件了。需要增加一个额外的参数去告诉 TypeScript ，我们构建模块用的是 require.js (当然也可以参数 AMD)，而不是 CommonJS。\n\n```bash\ntsc --module amd *.ts\n```\n\n模块确实是复杂的和在这个教程是不涉及的。如果你想要继续了解他们请看 TS 的文档 - [这](http://www.typescriptlang.org/docs/handbook/modules.html)\n\n# 第三方声明文件\n\n当使用之前设计的标准的 JavaScript 时，我们需要去应用一个声明文件去做 TypeScript 的兼容。声明文件有后缀 .d.ts 和包含各种关于库和它的 API 的信息。\n\nTypeScript 声明文件通常是手动去书写的，但是如果选择的库已经有人写了这个 .d.ts 文件，那会是一个很好的机会。[DefinitelyTyped](http://definitelytyped.org/)是这个最大的公共知识库，包含了一千多个库。还有一个最受欢迎的 Node.js 模块，它管理的是 TypeScript 的定义，它叫 [Typings](https://github.com/typings/typings)。\n\n如果你需要持续写一个你自己的声明文件，点击这个[地址](http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html)将会帮助你开始。\n\n# 总结\n\n这只是对 TypeScript 基础的介绍。","source":"_posts/learn-typescript.md","raw":"---\ntitle: learn-typescript(译)\ndate: 2018-01-26 15:09:03\ntags:\n---\n\n> 原文链接[Learn TypeScript In 30 Minutes](https://tutorialzine.com/2016/07/learn-typescript-in-30-minutes)\n\n今天我们将要看一下 TypeScript，它被设计为想要构建大型和复杂应用的会被编译成 JavaScript 的一种语言。它继承了大量像 C# 和 Java 语言里面科学的概念，是它更加的轻松和成为了自由类型的 JavaScript。\n\n从技术上说，你不必去学习 TypeScript 也会成为一位很好的开发者。然而采用 TypeScript 也会有很多的好处：\n\n* 由于这个静态类型，在 TypeScript 中的代码更加的具有可预测性，和更加容易查找漏洞。\n* 由于这个 模块、命名空间和完全的面向对象支持，可以在大型和复杂项目中更加容易组织代码。\n* TypeScript 编译成 JavaScript 有复杂的步骤，这可以在运行代码前捕获各种类型的错误。\n* 这 Angular2 采用 TypeScript，它告诉我们使用在项目中使用这个语言更优。\n\n# 静态类型\n一个非常独特的功能是 TypeScript 支持静态类型。着意味着你可以为变量指明类型，并且编译器会确保它们会被赋予正确类型的值。如果变量没有被指明类型，它们将会从代码中推断类型。\n\n下面是一个例子。每一个变量，函数参数或者是函数的返回值在初始化时可以被定义类型：\n\n```ts\nvar burger: string = 'hamburger', // 字符串\n    calories: number = 300,  // 数值\n    tasty: boolean = true; // 布尔类型\n\n// 另外，币可以忽略这个类型的声明\n// var burger = 'hamburger';\n\n// 函数期望参数是一个字符串和整型\n// 函数自身的类型是 void ，因为它不会返回任何值\nfunction speak(food: string, energy: number): void {\n  console.log('Our ' + food + \" has\" + energy + 'calories');\n}\n\nspeak(burger, calories);\n```\n\n因为 TypeScript 被编译成了 JavaScript ，所以之后不会看到他们是什么类型，它们会被完全移除：\n\n```js\n// 上面 ts 编译成的 JavaScript 的代码\nvar burger = 'hamburger',\n    calories = 300,\n    tasty = true;\n\nfunction speak(food, energy) {\n  console.log('Our ' + food + ' has' + energy + ' calories');\n}\n\nspeak(burger, calories);\n```\n\n然而，如果我们尝试去做一些不合规范的事情，编译器`tsc`将会警告我们，在我们的代码中也会有错误提示。例如：\n\n```ts\n// 变量的类型是布尔值，但是赋予的值确实一个字符串\nvar tasty: boolean = \"I haven't tried it yet\";\n```\n\n> main.ts(1, 5): error TS2322: Type 'string' is not assignable to type 'boolean'.\n\n如果我们在函数参数中出现上述类似的情况，也会给出警告的：\n\n```ts\nfunction speak(food: string, energy: number): void {\n  console.log(\"Our \" + food + \" has\" + energy + \" calories\");\n}\n\n// 赋予参数的值不能匹配定义参数的类型\nspeak(\"tripple cheesburger\", \"a ton of\");\n```\n\n> main.ts(5, 30): error TS2345: Argument of type 'string' is not assignable to parmeter of type 'number'.\n\n下面是一些常用的数据类型：\n* 数值(number) - 所有数字通过`number`类型来定义，它包括整型，浮点型和其它的数值类型。\n* 字符(string) - 这个文本类型，就像被单引号和双引号包裹的字符串。\n* 布尔(boolean) - `true`或者`false`，使用 0 和 1 将会造成编译错误。\n* 任意(any) - 用这个类型的变量，可以被赋值字符串，数字，等等其它任何类型的值。\n* 数组(Array) - 有两种声明的方法：`my_arr: number[]`或者`my_arr: Array<number>`。\n* 空(void) - 使用在函数没有任何值返回时。\n\n想看到所有类型，请点击直达[点我](http://www.typescriptlang.org/docs/handbook/basic-types.html) \n\n# 接口\n\n接口用来进行类型检测，即一个对象是否符合结构。通过定义接口，我们可以命名特定变量的组合，确保它们总是在一块的。当转化成 JavaScript ，接口会消失 - 它们仅有的目的就是在开发中提供帮助。\n\n在下面的例子中，我们定义了一个简单的为了函数参数的类型检测：\n\n```ts\n// 下面我们定义了我们的 Food 接口，它的属性和类型。\ninterface Food {\n  name: string;\n  calories: number;\n}\n\n// 我们告诉我们的函数期望到接口结构的参数\n// 我们可以知道我们需要的属性将要总是会得到\nfunction speak(food: Food): void {\n  console.log(\"Our \" + food.name + \" has\" + food.calories + \" calories\");\n}\n\n// 我们定义一个对象，这个对象将会有 Food 中定义的所有属性。\n// 注意类型将会自动的识别\nvar ice_cream = {\n  name: \"ice cream\",\n  calories: 200\n}\n\nspeak(ice_cream);\n```\n\n这个属性的顺序无关紧要。我们仅仅需要被要求的属性值能够传入并有正确的类型。如果丢失一些东西，或者是错误类型参数值，更或者属性名错误，这个编译器将要警告我们。\n\n```ts\ninterface Food {\n  name: string;\n  calories: number;\n}\n\nfunction speak(food: Food): void {\n  console.log(\"Our \" + food.name + \" has\" + food.calories + \" grams.\");\n}\n\n// 我们做了一个故意的错误，这个 name 被错误拼写成了 nmae。\nvar ice_cream = {\n  nmae: \"ice cream\",\n  calories: 200\n}\n\nspeak(ice_cream);\n```\n\n> XX.ts(nn, nn): error TS2345: Argument of type `{nmae: string; calories: number; } is not assignable to parameter of type type 'Food'. property 'name' is missing in type '{nmae: string; calories: number; }'`.\n\n这只是一些入门的基础，所以我们没有涉及更多接口的细节。然而，这有比我们这提到的还要多的多的东西，所以我们建议你出门右转到 TypeScript 官方的文档 - [interfaces](http://www.typescriptlang.org/docs/handbook/interfaces.html)\n\n# 类\n当构造有个大型的应用时，程序的面向对象成为了大多数开发者的首选，特别是在 Java 或者 c# 。TypeScript 提供类的系统和它们是相似的，包括继承，抽象类，接口实现，setters/getters，等等。\n\n在最近的 JavaScript 版本(ECMAScript 2015)中也同样提到了这一点，类可以不借助 TypeScript 直接在 JavaScript 中使用。TypeScript 和 JavaScript 中类的实现是相似的但是也略有不同，TypeScript 更加的严格。\n\n接着上述采用 Food 为主题的思路，下面是一个简单的 TypeScript 的类：\n\n```ts\nclass Menu {\n  // 属性\n  // 默认的它们都是公共的，但是也可以设置为私有的。\n  items: Array<string>;\n  pages: number;\n\n  // 一个明确的构造\n  constructor(item_list: Array<string>, total_pages: number) {\n    // 这个 this 关键字是强制的\n    this.items = item_list;\n    this.pages = total_pages;\n  }\n\n  // 方法\n  list(): void {\n    console.log(\"Our menu for today\");\n    for(var i = 0; i < this.items.length; i ++) {\n      console.log(this.items[i]);\n    }\n  }\n}\n\n// 实例化这个 Menu 的类\nvar sundayMenu = new Menu([\"pancakes\", \"waffles\", \"orange juice\"], 1);\n\n// 调用这个实例的方法\nsundayMenu.list();\n```\n\n任何一个最近在写 Java 或者 C# 的人都应该发现这个语法是很相似的。这个相同体现在继承上：\n\n```ts\nclass HappyMeal extends Menu {\n  // 属性被继承\n  \n  // 一个新的构造必须被定义\n  constructor(item_list: Array<string>, total_pages: number) {\n    // 在这个例子中，我们想要和父级(Menu)一样的结构\n    // 为了自动拷贝这个，我们可以调用 super() - 一个指向父级 constructor 的引用\n    super(item_list, total_pages);\n  }\n\n  // 就像属性，方法也会继承父级的\n  // 然而，我们想要覆盖父级 list() 函数，所以我们重新定义了它\n  list(): void {\n    console.log(\"Our special menu for children\");\n    for(var i = 0; i < this.items.lengthl i ++) {\n      console.log(this.items[i]);\n    }\n  }\n}\n\n// 实例化 HappyMeal 类\nvar menu_for_children = new HappyMeal([\"candy\", \"drink\", \"toy\"], 1);\n\n// 这次的这个日志信息将会以特殊的介绍开始\nmenu_for_children.list();\n```\n\n对于在 TS 更加深层次的类，你可以读这个文档 - [走这](http://www.typescriptlang.org/docs/handbook/classes.html)\n\n# 泛型\n\n泛型是允许函数接受各种不同类型参数的模板。用泛型来创建重复使用的组件比使用`any`类型的数据类型更加好，泛型保留了变量的类型，既有它们已有的也有它们没有的。\n\n```ts\n// 函数名字后面跟着的这个 <T> 是一个泛型函数\n// 当我们调用这个函数时，每一个 <T> 的实例将会被当前提供的类型所替代。\n\n// 接收一个类型 T 的参数，\n// 返回一个类型 T 的数组。\n\nfunction genericFunc<T>(argument: T): T[] {\n  var arratOfT: T[] = []; // 创造空的类型 T 的数组。\n  arrayOfT.push(arguments); // Push, 现在 arrayOfT = [argument]。\n  return arrayOfT;\n}\n\nvar arrayFromString = genericFunc<string>(\"beep\");\nconsole.log(arrayFromString[0]); // \"beep\"\nconsole.log(typeof arrayFromString[0]); // String\n\nvar arrayFromNumber = genericFunc(42);\nconsole.log(arrayFromNumber[0]); // 42\nconsole.log(typeof arrayFromnumber[0]); // number\n```\n\n我们调用这个函数时，我们先手动设定了这个字符类型。编译器并不会得知，参数已经通过了和自动地匹配了类型，就像第二次被调用。既然不是强制的，每次提供类型是一个好的做法，这样在更加复杂的场景中编译器也不会推断正确的类型。\n\n这个 TypeScript 确实提供了一些包含泛型类的好例子，有结合接口实现的，还有等等其它的类型。你可以找到他们在这[探寻](http://www.typescriptlang.org/docs/handbook/generics.html)\n\n# 模块\n\n在构建大型应用的另一个重要的概念便是模块。相比较拥有 10000 行的代码来说，把你的代码分割成很多小的可复用的组件，可以帮助你的项目有组织性和可理解。\n\nTypeScript 介绍了一种导入和导出模块的语法，但是不能够操作文件之间的衔接。为了能够让可扩展的模块，TS依赖第三方的模块：浏览器端的[require.js](http://requirejs.org/) 和 Node.js 端的[CommonJS](https://en.wikipedia.org/wiki/CommonJS)。让我们看一下依赖于 require.js 的 TypeScript 简单例子。\n\n我们有两个文件。一个导出一个函数，另一个导入它并调用它。\n\n**export.ts**\n\n```ts\nvar sayzHi = function(): void {\n  console.log(\"Hello!\");\n}\n\nexport = sayHi;\n```\n\n**import.ts**\n\n```ts\nimport sayHi = require('./exporter');\nsayHi();\n```\n\n现在我们需要下载 require.js 并在 `\\<script\\>` 标签中引入它 - [怎么玩看这里](http://requirejs.org/docs/start.html)。这个最后一步就是编译我们的两个 ts 文件了。需要增加一个额外的参数去告诉 TypeScript ，我们构建模块用的是 require.js (当然也可以参数 AMD)，而不是 CommonJS。\n\n```bash\ntsc --module amd *.ts\n```\n\n模块确实是复杂的和在这个教程是不涉及的。如果你想要继续了解他们请看 TS 的文档 - [这](http://www.typescriptlang.org/docs/handbook/modules.html)\n\n# 第三方声明文件\n\n当使用之前设计的标准的 JavaScript 时，我们需要去应用一个声明文件去做 TypeScript 的兼容。声明文件有后缀 .d.ts 和包含各种关于库和它的 API 的信息。\n\nTypeScript 声明文件通常是手动去书写的，但是如果选择的库已经有人写了这个 .d.ts 文件，那会是一个很好的机会。[DefinitelyTyped](http://definitelytyped.org/)是这个最大的公共知识库，包含了一千多个库。还有一个最受欢迎的 Node.js 模块，它管理的是 TypeScript 的定义，它叫 [Typings](https://github.com/typings/typings)。\n\n如果你需要持续写一个你自己的声明文件，点击这个[地址](http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html)将会帮助你开始。\n\n# 总结\n\n这只是对 TypeScript 基础的介绍。","slug":"learn-typescript","published":1,"updated":"2018-01-26T07:10:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9h0004ucxbpt2n0bhf","content":"<blockquote>\n<p>原文链接<a href=\"https://tutorialzine.com/2016/07/learn-typescript-in-30-minutes\" target=\"_blank\" rel=\"noopener\">Learn TypeScript In 30 Minutes</a></p>\n</blockquote>\n<p>今天我们将要看一下 TypeScript，它被设计为想要构建大型和复杂应用的会被编译成 JavaScript 的一种语言。它继承了大量像 C# 和 Java 语言里面科学的概念，是它更加的轻松和成为了自由类型的 JavaScript。</p>\n<p>从技术上说，你不必去学习 TypeScript 也会成为一位很好的开发者。然而采用 TypeScript 也会有很多的好处：</p>\n<ul>\n<li>由于这个静态类型，在 TypeScript 中的代码更加的具有可预测性，和更加容易查找漏洞。</li>\n<li>由于这个 模块、命名空间和完全的面向对象支持，可以在大型和复杂项目中更加容易组织代码。</li>\n<li>TypeScript 编译成 JavaScript 有复杂的步骤，这可以在运行代码前捕获各种类型的错误。</li>\n<li>这 Angular2 采用 TypeScript，它告诉我们使用在项目中使用这个语言更优。</li>\n</ul>\n<h1 id=\"静态类型\"><a class=\"markdownIt-Anchor\" href=\"#静态类型\"></a> 静态类型</h1>\n<p>一个非常独特的功能是 TypeScript 支持静态类型。着意味着你可以为变量指明类型，并且编译器会确保它们会被赋予正确类型的值。如果变量没有被指明类型，它们将会从代码中推断类型。</p>\n<p>下面是一个例子。每一个变量，函数参数或者是函数的返回值在初始化时可以被定义类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> burger: <span class=\"built_in\">string</span> = <span class=\"string\">'hamburger'</span>, <span class=\"comment\">// 字符串</span></span><br><span class=\"line\">    calories: <span class=\"built_in\">number</span> = <span class=\"number\">300</span>,  <span class=\"comment\">// 数值</span></span><br><span class=\"line\">    tasty: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 布尔类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另外，币可以忽略这个类型的声明</span></span><br><span class=\"line\"><span class=\"comment\">// var burger = 'hamburger';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数期望参数是一个字符串和整型</span></span><br><span class=\"line\"><span class=\"comment\">// 函数自身的类型是 void ，因为它不会返回任何值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: <span class=\"built_in\">string</span>, energy: <span class=\"built_in\">number</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Our '</span> + food + <span class=\"string\">\" has\"</span> + energy + <span class=\"string\">'calories'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(burger, calories);</span><br></pre></td></tr></table></figure>\n<p>因为 TypeScript 被编译成了 JavaScript ，所以之后不会看到他们是什么类型，它们会被完全移除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上面 ts 编译成的 JavaScript 的代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> burger = <span class=\"string\">'hamburger'</span>,</span><br><span class=\"line\">    calories = <span class=\"number\">300</span>,</span><br><span class=\"line\">    tasty = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food, energy</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Our '</span> + food + <span class=\"string\">' has'</span> + energy + <span class=\"string\">' calories'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(burger, calories);</span><br></pre></td></tr></table></figure>\n<p>然而，如果我们尝试去做一些不合规范的事情，编译器<code>tsc</code>将会警告我们，在我们的代码中也会有错误提示。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量的类型是布尔值，但是赋予的值确实一个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tasty: <span class=\"built_in\">boolean</span> = <span class=\"string\">\"I haven't tried it yet\"</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>main.ts(1, 5): error TS2322: Type ‘string’ is not assignable to type ‘boolean’.</p>\n</blockquote>\n<p>如果我们在函数参数中出现上述类似的情况，也会给出警告的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: <span class=\"built_in\">string</span>, energy: <span class=\"built_in\">number</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our \"</span> + food + <span class=\"string\">\" has\"</span> + energy + <span class=\"string\">\" calories\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋予参数的值不能匹配定义参数的类型</span></span><br><span class=\"line\">speak(<span class=\"string\">\"tripple cheesburger\"</span>, <span class=\"string\">\"a ton of\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>main.ts(5, 30): error TS2345: Argument of type ‘string’ is not assignable to parmeter of type ‘number’.</p>\n</blockquote>\n<p>下面是一些常用的数据类型：</p>\n<ul>\n<li>数值(number) - 所有数字通过<code>number</code>类型来定义，它包括整型，浮点型和其它的数值类型。</li>\n<li>字符(string) - 这个文本类型，就像被单引号和双引号包裹的字符串。</li>\n<li>布尔(boolean) - <code>true</code>或者<code>false</code>，使用 0 和 1 将会造成编译错误。</li>\n<li>任意(any) - 用这个类型的变量，可以被赋值字符串，数字，等等其它任何类型的值。</li>\n<li>数组(Array) - 有两种声明的方法：<code>my_arr: number[]</code>或者<code>my_arr: Array&lt;number&gt;</code>。</li>\n<li>空(void) - 使用在函数没有任何值返回时。</li>\n</ul>\n<p>想看到所有类型，请点击直达<a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener\">点我</a></p>\n<h1 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\"></a> 接口</h1>\n<p>接口用来进行类型检测，即一个对象是否符合结构。通过定义接口，我们可以命名特定变量的组合，确保它们总是在一块的。当转化成 JavaScript ，接口会消失 - 它们仅有的目的就是在开发中提供帮助。</p>\n<p>在下面的例子中，我们定义了一个简单的为了函数参数的类型检测：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面我们定义了我们的 Food 接口，它的属性和类型。</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Food &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  calories: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们告诉我们的函数期望到接口结构的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 我们可以知道我们需要的属性将要总是会得到</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: Food</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our \"</span> + food.name + <span class=\"string\">\" has\"</span> + food.calories + <span class=\"string\">\" calories\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们定义一个对象，这个对象将会有 Food 中定义的所有属性。</span></span><br><span class=\"line\"><span class=\"comment\">// 注意类型将会自动的识别</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ice_cream = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"ice cream\"</span>,</span><br><span class=\"line\">  calories: <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(ice_cream);</span><br></pre></td></tr></table></figure>\n<p>这个属性的顺序无关紧要。我们仅仅需要被要求的属性值能够传入并有正确的类型。如果丢失一些东西，或者是错误类型参数值，更或者属性名错误，这个编译器将要警告我们。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Food &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  calories: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: Food</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our \"</span> + food.name + <span class=\"string\">\" has\"</span> + food.calories + <span class=\"string\">\" grams.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们做了一个故意的错误，这个 name 被错误拼写成了 nmae。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ice_cream = &#123;</span><br><span class=\"line\">  nmae: <span class=\"string\">\"ice cream\"</span>,</span><br><span class=\"line\">  calories: <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(ice_cream);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>XX.ts(nn, nn): error TS2345: Argument of type <code>{nmae: string; calories: number; } is not assignable to parameter of type type 'Food'. property 'name' is missing in type '{nmae: string; calories: number; }'</code>.</p>\n</blockquote>\n<p>这只是一些入门的基础，所以我们没有涉及更多接口的细节。然而，这有比我们这提到的还要多的多的东西，所以我们建议你出门右转到 TypeScript 官方的文档 - <a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html\" target=\"_blank\" rel=\"noopener\">interfaces</a></p>\n<h1 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\"></a> 类</h1>\n<p>当构造有个大型的应用时，程序的面向对象成为了大多数开发者的首选，特别是在 Java 或者 c# 。TypeScript 提供类的系统和它们是相似的，包括继承，抽象类，接口实现，setters/getters，等等。</p>\n<p>在最近的 JavaScript 版本(ECMAScript 2015)中也同样提到了这一点，类可以不借助 TypeScript 直接在 JavaScript 中使用。TypeScript 和 JavaScript 中类的实现是相似的但是也略有不同，TypeScript 更加的严格。</p>\n<p>接着上述采用 Food 为主题的思路，下面是一个简单的 TypeScript 的类：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Menu &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 默认的它们都是公共的，但是也可以设置为私有的。</span></span><br><span class=\"line\">  items: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\">  pages: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个明确的构造</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">item_list: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;, total_pages: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个 this 关键字是强制的</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = item_list;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pages = total_pages;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  list(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our menu for today\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.items.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化这个 Menu 的类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sundayMenu = <span class=\"keyword\">new</span> Menu([<span class=\"string\">\"pancakes\"</span>, <span class=\"string\">\"waffles\"</span>, <span class=\"string\">\"orange juice\"</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用这个实例的方法</span></span><br><span class=\"line\">sundayMenu.list();</span><br></pre></td></tr></table></figure>\n<p>任何一个最近在写 Java 或者 C# 的人都应该发现这个语法是很相似的。这个相同体现在继承上：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> HappyMeal <span class=\"keyword\">extends</span> Menu &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性被继承</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 一个新的构造必须被定义</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">item_list: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;, total_pages: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这个例子中，我们想要和父级(Menu)一样的结构</span></span><br><span class=\"line\">    <span class=\"comment\">// 为了自动拷贝这个，我们可以调用 super() - 一个指向父级 constructor 的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(item_list, total_pages);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 就像属性，方法也会继承父级的</span></span><br><span class=\"line\">  <span class=\"comment\">// 然而，我们想要覆盖父级 list() 函数，所以我们重新定义了它</span></span><br><span class=\"line\">  list(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our special menu for children\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.items.lengthl i ++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化 HappyMeal 类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> menu_for_children = <span class=\"keyword\">new</span> HappyMeal([<span class=\"string\">\"candy\"</span>, <span class=\"string\">\"drink\"</span>, <span class=\"string\">\"toy\"</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这次的这个日志信息将会以特殊的介绍开始</span></span><br><span class=\"line\">menu_for_children.list();</span><br></pre></td></tr></table></figure>\n<p>对于在 TS 更加深层次的类，你可以读这个文档 - <a href=\"http://www.typescriptlang.org/docs/handbook/classes.html\" target=\"_blank\" rel=\"noopener\">走这</a></p>\n<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\"></a> 泛型</h1>\n<p>泛型是允许函数接受各种不同类型参数的模板。用泛型来创建重复使用的组件比使用<code>any</code>类型的数据类型更加好，泛型保留了变量的类型，既有它们已有的也有它们没有的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数名字后面跟着的这个 &lt;T&gt; 是一个泛型函数</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们调用这个函数时，每一个 &lt;T&gt; 的实例将会被当前提供的类型所替代。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收一个类型 T 的参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个类型 T 的数组。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genericFunc</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">argument: T</span>): <span class=\"title\">T</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arratOfT: T[] = []; <span class=\"comment\">// 创造空的类型 T 的数组。</span></span><br><span class=\"line\">  arrayOfT.push(<span class=\"built_in\">arguments</span>); <span class=\"comment\">// Push, 现在 arrayOfT = [argument]。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arrayOfT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayFromString = genericFunc&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"beep\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayFromString[<span class=\"number\">0</span>]); <span class=\"comment\">// \"beep\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arrayFromString[<span class=\"number\">0</span>]); <span class=\"comment\">// String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayFromNumber = genericFunc(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayFromNumber[<span class=\"number\">0</span>]); <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arrayFromnumber[<span class=\"number\">0</span>]); <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n<p>我们调用这个函数时，我们先手动设定了这个字符类型。编译器并不会得知，参数已经通过了和自动地匹配了类型，就像第二次被调用。既然不是强制的，每次提供类型是一个好的做法，这样在更加复杂的场景中编译器也不会推断正确的类型。</p>\n<p>这个 TypeScript 确实提供了一些包含泛型类的好例子，有结合接口实现的，还有等等其它的类型。你可以找到他们在这<a href=\"http://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noopener\">探寻</a></p>\n<h1 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\"></a> 模块</h1>\n<p>在构建大型应用的另一个重要的概念便是模块。相比较拥有 10000 行的代码来说，把你的代码分割成很多小的可复用的组件，可以帮助你的项目有组织性和可理解。</p>\n<p>TypeScript 介绍了一种导入和导出模块的语法，但是不能够操作文件之间的衔接。为了能够让可扩展的模块，TS依赖第三方的模块：浏览器端的<a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">require.js</a> 和 Node.js 端的<a href=\"https://en.wikipedia.org/wiki/CommonJS\" target=\"_blank\" rel=\"noopener\">CommonJS</a>。让我们看一下依赖于 require.js 的 TypeScript 简单例子。</p>\n<p>我们有两个文件。一个导出一个函数，另一个导入它并调用它。</p>\n<p><strong>export.ts</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sayzHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> = sayHi;</span><br></pre></td></tr></table></figure>\n<p><strong>import.ts</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sayHi = <span class=\"built_in\">require</span>(<span class=\"string\">'./exporter'</span>);</span><br><span class=\"line\">sayHi();</span><br></pre></td></tr></table></figure>\n<p>现在我们需要下载 require.js 并在 <code>\\&lt;script\\&gt;</code> 标签中引入它 - <a href=\"http://requirejs.org/docs/start.html\" target=\"_blank\" rel=\"noopener\">怎么玩看这里</a>。这个最后一步就是编译我们的两个 ts 文件了。需要增加一个额外的参数去告诉 TypeScript ，我们构建模块用的是 require.js (当然也可以参数 AMD)，而不是 CommonJS。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --module amd *.ts</span><br></pre></td></tr></table></figure>\n<p>模块确实是复杂的和在这个教程是不涉及的。如果你想要继续了解他们请看 TS 的文档 - <a href=\"http://www.typescriptlang.org/docs/handbook/modules.html\" target=\"_blank\" rel=\"noopener\">这</a></p>\n<h1 id=\"第三方声明文件\"><a class=\"markdownIt-Anchor\" href=\"#第三方声明文件\"></a> 第三方声明文件</h1>\n<p>当使用之前设计的标准的 JavaScript 时，我们需要去应用一个声明文件去做 TypeScript 的兼容。声明文件有后缀 .d.ts 和包含各种关于库和它的 API 的信息。</p>\n<p>TypeScript 声明文件通常是手动去书写的，但是如果选择的库已经有人写了这个 .d.ts 文件，那会是一个很好的机会。<a href=\"http://definitelytyped.org/\" target=\"_blank\" rel=\"noopener\">DefinitelyTyped</a>是这个最大的公共知识库，包含了一千多个库。还有一个最受欢迎的 Node.js 模块，它管理的是 TypeScript 的定义，它叫 <a href=\"https://github.com/typings/typings\" target=\"_blank\" rel=\"noopener\">Typings</a>。</p>\n<p>如果你需要持续写一个你自己的声明文件，点击这个<a href=\"http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html\" target=\"_blank\" rel=\"noopener\">地址</a>将会帮助你开始。</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>这只是对 TypeScript 基础的介绍。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>原文链接<a href=\"https://tutorialzine.com/2016/07/learn-typescript-in-30-minutes\" target=\"_blank\" rel=\"noopener\">Learn TypeScript In 30 Minutes</a></p>\n</blockquote>\n<p>今天我们将要看一下 TypeScript，它被设计为想要构建大型和复杂应用的会被编译成 JavaScript 的一种语言。它继承了大量像 C# 和 Java 语言里面科学的概念，是它更加的轻松和成为了自由类型的 JavaScript。</p>\n<p>从技术上说，你不必去学习 TypeScript 也会成为一位很好的开发者。然而采用 TypeScript 也会有很多的好处：</p>\n<ul>\n<li>由于这个静态类型，在 TypeScript 中的代码更加的具有可预测性，和更加容易查找漏洞。</li>\n<li>由于这个 模块、命名空间和完全的面向对象支持，可以在大型和复杂项目中更加容易组织代码。</li>\n<li>TypeScript 编译成 JavaScript 有复杂的步骤，这可以在运行代码前捕获各种类型的错误。</li>\n<li>这 Angular2 采用 TypeScript，它告诉我们使用在项目中使用这个语言更优。</li>\n</ul>\n<h1 id=\"静态类型\"><a class=\"markdownIt-Anchor\" href=\"#静态类型\"></a> 静态类型</h1>\n<p>一个非常独特的功能是 TypeScript 支持静态类型。着意味着你可以为变量指明类型，并且编译器会确保它们会被赋予正确类型的值。如果变量没有被指明类型，它们将会从代码中推断类型。</p>\n<p>下面是一个例子。每一个变量，函数参数或者是函数的返回值在初始化时可以被定义类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> burger: <span class=\"built_in\">string</span> = <span class=\"string\">'hamburger'</span>, <span class=\"comment\">// 字符串</span></span><br><span class=\"line\">    calories: <span class=\"built_in\">number</span> = <span class=\"number\">300</span>,  <span class=\"comment\">// 数值</span></span><br><span class=\"line\">    tasty: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 布尔类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另外，币可以忽略这个类型的声明</span></span><br><span class=\"line\"><span class=\"comment\">// var burger = 'hamburger';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数期望参数是一个字符串和整型</span></span><br><span class=\"line\"><span class=\"comment\">// 函数自身的类型是 void ，因为它不会返回任何值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: <span class=\"built_in\">string</span>, energy: <span class=\"built_in\">number</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Our '</span> + food + <span class=\"string\">\" has\"</span> + energy + <span class=\"string\">'calories'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(burger, calories);</span><br></pre></td></tr></table></figure>\n<p>因为 TypeScript 被编译成了 JavaScript ，所以之后不会看到他们是什么类型，它们会被完全移除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上面 ts 编译成的 JavaScript 的代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> burger = <span class=\"string\">'hamburger'</span>,</span><br><span class=\"line\">    calories = <span class=\"number\">300</span>,</span><br><span class=\"line\">    tasty = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food, energy</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Our '</span> + food + <span class=\"string\">' has'</span> + energy + <span class=\"string\">' calories'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(burger, calories);</span><br></pre></td></tr></table></figure>\n<p>然而，如果我们尝试去做一些不合规范的事情，编译器<code>tsc</code>将会警告我们，在我们的代码中也会有错误提示。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量的类型是布尔值，但是赋予的值确实一个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tasty: <span class=\"built_in\">boolean</span> = <span class=\"string\">\"I haven't tried it yet\"</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>main.ts(1, 5): error TS2322: Type ‘string’ is not assignable to type ‘boolean’.</p>\n</blockquote>\n<p>如果我们在函数参数中出现上述类似的情况，也会给出警告的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: <span class=\"built_in\">string</span>, energy: <span class=\"built_in\">number</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our \"</span> + food + <span class=\"string\">\" has\"</span> + energy + <span class=\"string\">\" calories\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋予参数的值不能匹配定义参数的类型</span></span><br><span class=\"line\">speak(<span class=\"string\">\"tripple cheesburger\"</span>, <span class=\"string\">\"a ton of\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>main.ts(5, 30): error TS2345: Argument of type ‘string’ is not assignable to parmeter of type ‘number’.</p>\n</blockquote>\n<p>下面是一些常用的数据类型：</p>\n<ul>\n<li>数值(number) - 所有数字通过<code>number</code>类型来定义，它包括整型，浮点型和其它的数值类型。</li>\n<li>字符(string) - 这个文本类型，就像被单引号和双引号包裹的字符串。</li>\n<li>布尔(boolean) - <code>true</code>或者<code>false</code>，使用 0 和 1 将会造成编译错误。</li>\n<li>任意(any) - 用这个类型的变量，可以被赋值字符串，数字，等等其它任何类型的值。</li>\n<li>数组(Array) - 有两种声明的方法：<code>my_arr: number[]</code>或者<code>my_arr: Array&lt;number&gt;</code>。</li>\n<li>空(void) - 使用在函数没有任何值返回时。</li>\n</ul>\n<p>想看到所有类型，请点击直达<a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener\">点我</a></p>\n<h1 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\"></a> 接口</h1>\n<p>接口用来进行类型检测，即一个对象是否符合结构。通过定义接口，我们可以命名特定变量的组合，确保它们总是在一块的。当转化成 JavaScript ，接口会消失 - 它们仅有的目的就是在开发中提供帮助。</p>\n<p>在下面的例子中，我们定义了一个简单的为了函数参数的类型检测：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面我们定义了我们的 Food 接口，它的属性和类型。</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Food &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  calories: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们告诉我们的函数期望到接口结构的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 我们可以知道我们需要的属性将要总是会得到</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: Food</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our \"</span> + food.name + <span class=\"string\">\" has\"</span> + food.calories + <span class=\"string\">\" calories\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们定义一个对象，这个对象将会有 Food 中定义的所有属性。</span></span><br><span class=\"line\"><span class=\"comment\">// 注意类型将会自动的识别</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ice_cream = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"ice cream\"</span>,</span><br><span class=\"line\">  calories: <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(ice_cream);</span><br></pre></td></tr></table></figure>\n<p>这个属性的顺序无关紧要。我们仅仅需要被要求的属性值能够传入并有正确的类型。如果丢失一些东西，或者是错误类型参数值，更或者属性名错误，这个编译器将要警告我们。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Food &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  calories: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">food: Food</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our \"</span> + food.name + <span class=\"string\">\" has\"</span> + food.calories + <span class=\"string\">\" grams.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们做了一个故意的错误，这个 name 被错误拼写成了 nmae。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ice_cream = &#123;</span><br><span class=\"line\">  nmae: <span class=\"string\">\"ice cream\"</span>,</span><br><span class=\"line\">  calories: <span class=\"number\">200</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">speak(ice_cream);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>XX.ts(nn, nn): error TS2345: Argument of type <code>{nmae: string; calories: number; } is not assignable to parameter of type type 'Food'. property 'name' is missing in type '{nmae: string; calories: number; }'</code>.</p>\n</blockquote>\n<p>这只是一些入门的基础，所以我们没有涉及更多接口的细节。然而，这有比我们这提到的还要多的多的东西，所以我们建议你出门右转到 TypeScript 官方的文档 - <a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html\" target=\"_blank\" rel=\"noopener\">interfaces</a></p>\n<h1 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\"></a> 类</h1>\n<p>当构造有个大型的应用时，程序的面向对象成为了大多数开发者的首选，特别是在 Java 或者 c# 。TypeScript 提供类的系统和它们是相似的，包括继承，抽象类，接口实现，setters/getters，等等。</p>\n<p>在最近的 JavaScript 版本(ECMAScript 2015)中也同样提到了这一点，类可以不借助 TypeScript 直接在 JavaScript 中使用。TypeScript 和 JavaScript 中类的实现是相似的但是也略有不同，TypeScript 更加的严格。</p>\n<p>接着上述采用 Food 为主题的思路，下面是一个简单的 TypeScript 的类：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Menu &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 默认的它们都是公共的，但是也可以设置为私有的。</span></span><br><span class=\"line\">  items: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\">  pages: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个明确的构造</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">item_list: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;, total_pages: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个 this 关键字是强制的</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.items = item_list;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pages = total_pages;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  list(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our menu for today\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.items.length; i ++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化这个 Menu 的类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sundayMenu = <span class=\"keyword\">new</span> Menu([<span class=\"string\">\"pancakes\"</span>, <span class=\"string\">\"waffles\"</span>, <span class=\"string\">\"orange juice\"</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用这个实例的方法</span></span><br><span class=\"line\">sundayMenu.list();</span><br></pre></td></tr></table></figure>\n<p>任何一个最近在写 Java 或者 C# 的人都应该发现这个语法是很相似的。这个相同体现在继承上：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> HappyMeal <span class=\"keyword\">extends</span> Menu &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性被继承</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 一个新的构造必须被定义</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">item_list: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;, total_pages: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这个例子中，我们想要和父级(Menu)一样的结构</span></span><br><span class=\"line\">    <span class=\"comment\">// 为了自动拷贝这个，我们可以调用 super() - 一个指向父级 constructor 的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(item_list, total_pages);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 就像属性，方法也会继承父级的</span></span><br><span class=\"line\">  <span class=\"comment\">// 然而，我们想要覆盖父级 list() 函数，所以我们重新定义了它</span></span><br><span class=\"line\">  list(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Our special menu for children\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.items.lengthl i ++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.items[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化 HappyMeal 类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> menu_for_children = <span class=\"keyword\">new</span> HappyMeal([<span class=\"string\">\"candy\"</span>, <span class=\"string\">\"drink\"</span>, <span class=\"string\">\"toy\"</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这次的这个日志信息将会以特殊的介绍开始</span></span><br><span class=\"line\">menu_for_children.list();</span><br></pre></td></tr></table></figure>\n<p>对于在 TS 更加深层次的类，你可以读这个文档 - <a href=\"http://www.typescriptlang.org/docs/handbook/classes.html\" target=\"_blank\" rel=\"noopener\">走这</a></p>\n<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\"></a> 泛型</h1>\n<p>泛型是允许函数接受各种不同类型参数的模板。用泛型来创建重复使用的组件比使用<code>any</code>类型的数据类型更加好，泛型保留了变量的类型，既有它们已有的也有它们没有的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数名字后面跟着的这个 &lt;T&gt; 是一个泛型函数</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们调用这个函数时，每一个 &lt;T&gt; 的实例将会被当前提供的类型所替代。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收一个类型 T 的参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个类型 T 的数组。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genericFunc</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">argument: T</span>): <span class=\"title\">T</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arratOfT: T[] = []; <span class=\"comment\">// 创造空的类型 T 的数组。</span></span><br><span class=\"line\">  arrayOfT.push(<span class=\"built_in\">arguments</span>); <span class=\"comment\">// Push, 现在 arrayOfT = [argument]。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arrayOfT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayFromString = genericFunc&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"beep\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayFromString[<span class=\"number\">0</span>]); <span class=\"comment\">// \"beep\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arrayFromString[<span class=\"number\">0</span>]); <span class=\"comment\">// String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayFromNumber = genericFunc(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayFromNumber[<span class=\"number\">0</span>]); <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arrayFromnumber[<span class=\"number\">0</span>]); <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n<p>我们调用这个函数时，我们先手动设定了这个字符类型。编译器并不会得知，参数已经通过了和自动地匹配了类型，就像第二次被调用。既然不是强制的，每次提供类型是一个好的做法，这样在更加复杂的场景中编译器也不会推断正确的类型。</p>\n<p>这个 TypeScript 确实提供了一些包含泛型类的好例子，有结合接口实现的，还有等等其它的类型。你可以找到他们在这<a href=\"http://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noopener\">探寻</a></p>\n<h1 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\"></a> 模块</h1>\n<p>在构建大型应用的另一个重要的概念便是模块。相比较拥有 10000 行的代码来说，把你的代码分割成很多小的可复用的组件，可以帮助你的项目有组织性和可理解。</p>\n<p>TypeScript 介绍了一种导入和导出模块的语法，但是不能够操作文件之间的衔接。为了能够让可扩展的模块，TS依赖第三方的模块：浏览器端的<a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">require.js</a> 和 Node.js 端的<a href=\"https://en.wikipedia.org/wiki/CommonJS\" target=\"_blank\" rel=\"noopener\">CommonJS</a>。让我们看一下依赖于 require.js 的 TypeScript 简单例子。</p>\n<p>我们有两个文件。一个导出一个函数，另一个导入它并调用它。</p>\n<p><strong>export.ts</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sayzHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> = sayHi;</span><br></pre></td></tr></table></figure>\n<p><strong>import.ts</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sayHi = <span class=\"built_in\">require</span>(<span class=\"string\">'./exporter'</span>);</span><br><span class=\"line\">sayHi();</span><br></pre></td></tr></table></figure>\n<p>现在我们需要下载 require.js 并在 <code>\\&lt;script\\&gt;</code> 标签中引入它 - <a href=\"http://requirejs.org/docs/start.html\" target=\"_blank\" rel=\"noopener\">怎么玩看这里</a>。这个最后一步就是编译我们的两个 ts 文件了。需要增加一个额外的参数去告诉 TypeScript ，我们构建模块用的是 require.js (当然也可以参数 AMD)，而不是 CommonJS。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --module amd *.ts</span><br></pre></td></tr></table></figure>\n<p>模块确实是复杂的和在这个教程是不涉及的。如果你想要继续了解他们请看 TS 的文档 - <a href=\"http://www.typescriptlang.org/docs/handbook/modules.html\" target=\"_blank\" rel=\"noopener\">这</a></p>\n<h1 id=\"第三方声明文件\"><a class=\"markdownIt-Anchor\" href=\"#第三方声明文件\"></a> 第三方声明文件</h1>\n<p>当使用之前设计的标准的 JavaScript 时，我们需要去应用一个声明文件去做 TypeScript 的兼容。声明文件有后缀 .d.ts 和包含各种关于库和它的 API 的信息。</p>\n<p>TypeScript 声明文件通常是手动去书写的，但是如果选择的库已经有人写了这个 .d.ts 文件，那会是一个很好的机会。<a href=\"http://definitelytyped.org/\" target=\"_blank\" rel=\"noopener\">DefinitelyTyped</a>是这个最大的公共知识库，包含了一千多个库。还有一个最受欢迎的 Node.js 模块，它管理的是 TypeScript 的定义，它叫 <a href=\"https://github.com/typings/typings\" target=\"_blank\" rel=\"noopener\">Typings</a>。</p>\n<p>如果你需要持续写一个你自己的声明文件，点击这个<a href=\"http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html\" target=\"_blank\" rel=\"noopener\">地址</a>将会帮助你开始。</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>这只是对 TypeScript 基础的介绍。</p>\n"},{"title":"interview-js","date":"2018-01-10T01:34:18.000Z","_content":"# 文章来源\n> [JavaScript 权威面试指南]()\n# 类型及其转换\n\n# 基础知识\n1. JavaScript 中 this 是如何工作的\n```js\nvar x = 0;\nvar foo = {\n  x: 1,\n  bar: {\n    x: 2,\n    baz: function() {\n      console.log(this.x);\n    }\n  }\n}\n\nvar a = foo.bar.baz;\nfoo.bar.baz(); // 2\na(); // 0\n```\n\n* 函数调用的位置会决定this的绑定\n\n**this到底是什么？**\n","source":"_posts/interview-js.md","raw":"---\ntitle: interview-js\ndate: 2018-01-10 09:34:18\ntags: 面试\n---\n# 文章来源\n> [JavaScript 权威面试指南]()\n# 类型及其转换\n\n# 基础知识\n1. JavaScript 中 this 是如何工作的\n```js\nvar x = 0;\nvar foo = {\n  x: 1,\n  bar: {\n    x: 2,\n    baz: function() {\n      console.log(this.x);\n    }\n  }\n}\n\nvar a = foo.bar.baz;\nfoo.bar.baz(); // 2\na(); // 0\n```\n\n* 函数调用的位置会决定this的绑定\n\n**this到底是什么？**\n","slug":"interview-js","published":1,"updated":"2018-01-13T03:18:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9j0005ucxbb8b98xij","content":"<h1 id=\"文章来源\"><a class=\"markdownIt-Anchor\" href=\"#文章来源\"></a> 文章来源</h1>\n<blockquote>\n<p><a href=\"\">JavaScript 权威面试指南</a></p>\n</blockquote>\n<h1 id=\"类型及其转换\"><a class=\"markdownIt-Anchor\" href=\"#类型及其转换\"></a> 类型及其转换</h1>\n<h1 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\"></a> 基础知识</h1>\n<ol>\n<li>JavaScript 中 this 是如何工作的</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">1</span>,</span><br><span class=\"line\">  bar: &#123;</span><br><span class=\"line\">    x: <span class=\"number\">2</span>,</span><br><span class=\"line\">    baz: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo.bar.baz;</span><br><span class=\"line\">foo.bar.baz(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">a(); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数调用的位置会决定this的绑定</li>\n</ul>\n<p><strong>this到底是什么？</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文章来源\"><a class=\"markdownIt-Anchor\" href=\"#文章来源\"></a> 文章来源</h1>\n<blockquote>\n<p><a href=\"\">JavaScript 权威面试指南</a></p>\n</blockquote>\n<h1 id=\"类型及其转换\"><a class=\"markdownIt-Anchor\" href=\"#类型及其转换\"></a> 类型及其转换</h1>\n<h1 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\"></a> 基础知识</h1>\n<ol>\n<li>JavaScript 中 this 是如何工作的</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">1</span>,</span><br><span class=\"line\">  bar: &#123;</span><br><span class=\"line\">    x: <span class=\"number\">2</span>,</span><br><span class=\"line\">    baz: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo.bar.baz;</span><br><span class=\"line\">foo.bar.baz(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">a(); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数调用的位置会决定this的绑定</li>\n</ul>\n<p><strong>this到底是什么？</strong></p>\n"},{"title":"interview","date":"2018-01-12T03:04:42.000Z","_content":"> [原文地址](https://www.nczonline.net/blog/2015/09/my-favorite-interview-question/)\n\n面试和招聘人是一件很难的事情。招聘这个不适合人的成本是很高的，公司常常是想招聘的人能够短时间而不是在之后一段时间内提供帮助，并且有时都不想等到好的候选人出现的时候。针对这一点，我认为和职位不匹配的人造成的损失比找不上该职位的人更大，我认为应该去优化招聘。\n心中有一个目标，我有一个最喜欢的面试问题，它可以帮助我做招聘的决定并很长时间都不会失效。我确定你们中的一些可能正在想，“哦，不可能，他正在抛弃好的面试问题，因为原有的问题正在失效”。并不是如此。我认为一个好的面试过程是，即使面试者提前知道了这个面试问题，但是它依然是有效的。我将要分享这个特殊的问题，因为我认为通过将注意力集中在对职位期许，它将要帮助每一个人（候选者和面试）。\n# 问题\n我很少以相同的方式问问题，但是它通常会包含下面的这个问题：\n> 假设你可以在星期一开始设计你的工作。而且你在理想的公司和拥有理想的工作和薪水。你所拥有的一切，是告诉公司，你要在你的工作中做些什么，并且你做到了。你的工作意味着什么？\n\n这个问题第一眼看是很简单的，但是这有一些细节可以帮助你去挖掘面试者一些重要的细节。\n## 星期一开始\n“星期一开始”一个特殊的时间开始工作。很明显我们并没有谈论你希望以后到达的一个位置，而是谈论一个不真实存在的理想工作。如果工作开始在星期一，你是没有时间学习心得技能和获得新的经验。专业上讲，就是现在的你，你需要拿出一份在下周可以有效执行的工作。\n## 理想的公司，职位和工资\n我先排除了公司，职位和工资的因素，因为有些东西是人们*想法*中想要的，但是不能真的影响我的决定。很明显除非他是我的员工，负责公司完成在我的控制之外（我也不想让别人说我现在的老板是他们梦寐以求的工作）。我不想去讨论关于他们的头衔，因为他们大多数是没有意义的；我对你想要别人怎么称呼你感兴趣，我想要知道的是你对现在工作的激情。而工资对于每个人有着不同的重要性，而且它特不能告诉我关于这个人太多的东西。是的，我也希望有每年一亿的收入，但是这对于我对候选人的评估没有任何的帮助。\n所以通过说清人们关心这三件事——公司，头衔和工资，这可以是候选者自由地思考他们真正在意的是什么。\n# 讨论\n应该是显而易见的，这并不是意味着回答是一句话的事。我是用这道题来方便地打开话题，去挖掘和找到这个人的内在动力。根据上述的问题和他的回答来帮助我理解这个人和职位的匹配程度。当你自己尝试时，我鼓励你去发展你自己沿着这个问题去更深地发掘候适合选者理想的工作是什么。\n## 卡壳\n有时人们很难抓住大范围问题的核心和他们卡壳了。对于当时的他们来说定义他们想要工作的难度将要让他们压倒，如果这个发生，我会按照正确的步骤去询问上述的问题：\n* 让我们开始一个简单的问题：你想要整天地写代码吗？如果不，你还想要做些什么其它的事情呢？\n* 你是喜欢一个人工作还是加入一个团队一起工作？如果在一个团队中，你将要承担的角色是什么？\n* 你有你想要花费大量时间在它身上的程序语言吗？在程序语言所花费的时间什么比例会让你高兴？\n* 让我们反向思考一下：你绝对不想要做什么？\n* 你有对于你新的工作，你想要花时间去学习的东西吗？\n\n上述的这些问题会让候选者回到正轨上（我从来不会让面试者选择问题）。通过帮助减少工作描述的选项，大多数候选者能够继续沿着下面的路径继续。\n## 我的观点\n我努力做的第一件事是是否一个人的工作描述和他们的技能匹配。如果一位22岁的年轻人告诉我他下周想要成为谷歌的CEO，这可能是他们对他们的技术看法是有缺陷的或者他们并没有真地抓住我正在问什么。在上述的例子中，我会说一些像：“记住，你是在星期一开始这个工作的。你准备好在周一成为谷歌的CEO了吗？”如果他们回答是肯定的，然后我可能会让我自己问他们如何去管理公司，然后心理上会转向等待下一位候选者。\n## 独立者 VS 管理者\n我曾经为独立贡献者(IC)位置招聘人，并且也问了这个问题，目的只是他们真的想成为一个管理者。有时申请经理职位的人还真的想成为一位IC。这是一个真实且重要的数据点，因为当他们处在一个自己没有憧憬的职位上时，他们可能会不高兴，并且可能会制造出打的或小的问题、所以如果我有任何暗示，他们都可能不会申请正确的角色，我清晰地问他们，“这个理想的工作是在管理上吗？”或者，“这个理想的工作没有管理的责任吗？”\n## 领导 VS 追随者\n在相对于IC vs 经理稍微不同的是一个人是否是领导人或者追随者。这有一个狡猾的部分：领导者可能告诉你他们认为他们可以，而追随者机会从来不会告诉你他们更愿意追随。当然，你也不能真地直接问他们，因为没有人想要考虑成为一个追随者，所以每个人都将要说他们是一个领导。我已经发现最好只是听他们说和做一个决定。我在确定某人是否是领导者时所用的关键词是：\n* 我喜欢帮助别人\n* 我感觉我有很多的经验分享\n* 我不介意/我喜欢辅导别人\n随便提一下，如果你想着你通过使用这些词可以骗别人你想成为领导，但是你错了。他们只是更加深入的指标，你不将要骗到想要知道他们正在做的某个人。\n**重点：**领导者和追随者对于一个健康的团队都是重要的。同样重要的是确保你将人和角色可以正确匹配。将追随者放到领导人的位置对每个人都是难以置信的损害，另外将领导放到员工的位置上将要导致不愉快。目标不是淘汰追随者，而是确保你正在有效地将人安排到了正确的位置。\n**花费的时间**\n在讨论中的几个点钟，我通常问人们他们想要在任何特定的任务所分配的时间长短。他们会在代码工作和管理工作上对半分吗？他们是想要花费70%在架构设计和30%在写代码吗？在想要花费10%的时间（像，其它时间待在游戏了）去写代码他们会是经理吗？对于对一个人的理解，这些所有的都是重要。\n## 结论\n在这个问题的结尾，我重复一遍候选人告诉我的。像：\n> 好的，所以你看一下是否我是正确的。在你的理想的工作，你想要花费一天的75%写代码(JavaScript)和25%的时间和别人讨论技术和代码。你宁愿在一个5个人的团队和你想要更优经验的人辅导你。对吗？\n\n如果我说错了，我会问他们正确的，让我有一个好的理解，一旦我有正确的答案，然后我向他们说明我为什么问这个问题，通常下面的答复：\n> 我向人们问这个问题的原因是因为我认为将人们放在正确的职位上这是重要的。我想要了解你和你的职场目标能够确认我们有一个更适合你的职位。现在我将要告诉你我正在找的是什么和我们可以共同决定是否我们有合适的为了你的职位。你听懂了吗？\n。。。\nAt that point, I describe what the job they're applying for is like. I talk about the areas in which it is different from what they described and the areas in which it matches. Then, I offer my perspective on whether there's a fit and I ask them for theirs. This usually ends up in one of several paths:\n\nIt sounds to me like this isn't a great match for what you're looking for. Do you agree?\nFrom what you've described, this seems like a job that mostly matches what you're looking for. What do you think?\nIt seems like this job is exactly what you're looking for. Do you agree?\nWhen there's a good fit, the candidate feels better about continuing in the process because of this exercise. They understand that I'm not saying this is a great position for them to try to blindly sell them, but that I really understand what they're looking for and can honestly say I think it's a good fit.\n\nI've never once had an argument with someone when I suggested it seemed like we didn't have a good match. In most cases, the candidates have thanked me for the exercise because it helped them really narrow in on what they're passionate about and what type of job they should be looking for. A couple times I've encouraged the candidate to apply to a different job at the company that seems more suited for what they're looking for. In all cases, candidates have told me they enjoyed answering the question.\n\n# Summary\n\nI think getting to know a candidate is almost (almost!) more important than evaluating their skills. I've seen a lot of damage caused by hiring people into the wrong position due to mismatched expectations, and I'd like to avoid that at all costs. I also want candidates to know that I'm not trying to sell them something I don't have, nor am I making false promises about their chances of success when hired. Instead, I'm offering a complete view into the job they're applying for and, hopefully, a clearer view of their own goals and preferences.\n\nI can honestly say this is the question I enjoy asking the most because reveal a lot about themselves. I think the key takeaway is that, regardless of the outcome, they feel listened to and that they were given a chance to really express how they see themselves fitting into an organization.\n\nUltimately, I feel that I have a responsibility to both my employer and the candidate to make sure we hire people that are good matches for the positions we have. The answers I receive from this question tell me very quickly how good of a match there is, at which point I feel better about spending more time digging into their credentials and skills. If I could only ask one interview question to every candidate, this would be the one.","source":"_posts/interview.md","raw":"---\ntitle: interview\ndate: 2018-01-12 11:04:42\ntags:\n---\n> [原文地址](https://www.nczonline.net/blog/2015/09/my-favorite-interview-question/)\n\n面试和招聘人是一件很难的事情。招聘这个不适合人的成本是很高的，公司常常是想招聘的人能够短时间而不是在之后一段时间内提供帮助，并且有时都不想等到好的候选人出现的时候。针对这一点，我认为和职位不匹配的人造成的损失比找不上该职位的人更大，我认为应该去优化招聘。\n心中有一个目标，我有一个最喜欢的面试问题，它可以帮助我做招聘的决定并很长时间都不会失效。我确定你们中的一些可能正在想，“哦，不可能，他正在抛弃好的面试问题，因为原有的问题正在失效”。并不是如此。我认为一个好的面试过程是，即使面试者提前知道了这个面试问题，但是它依然是有效的。我将要分享这个特殊的问题，因为我认为通过将注意力集中在对职位期许，它将要帮助每一个人（候选者和面试）。\n# 问题\n我很少以相同的方式问问题，但是它通常会包含下面的这个问题：\n> 假设你可以在星期一开始设计你的工作。而且你在理想的公司和拥有理想的工作和薪水。你所拥有的一切，是告诉公司，你要在你的工作中做些什么，并且你做到了。你的工作意味着什么？\n\n这个问题第一眼看是很简单的，但是这有一些细节可以帮助你去挖掘面试者一些重要的细节。\n## 星期一开始\n“星期一开始”一个特殊的时间开始工作。很明显我们并没有谈论你希望以后到达的一个位置，而是谈论一个不真实存在的理想工作。如果工作开始在星期一，你是没有时间学习心得技能和获得新的经验。专业上讲，就是现在的你，你需要拿出一份在下周可以有效执行的工作。\n## 理想的公司，职位和工资\n我先排除了公司，职位和工资的因素，因为有些东西是人们*想法*中想要的，但是不能真的影响我的决定。很明显除非他是我的员工，负责公司完成在我的控制之外（我也不想让别人说我现在的老板是他们梦寐以求的工作）。我不想去讨论关于他们的头衔，因为他们大多数是没有意义的；我对你想要别人怎么称呼你感兴趣，我想要知道的是你对现在工作的激情。而工资对于每个人有着不同的重要性，而且它特不能告诉我关于这个人太多的东西。是的，我也希望有每年一亿的收入，但是这对于我对候选人的评估没有任何的帮助。\n所以通过说清人们关心这三件事——公司，头衔和工资，这可以是候选者自由地思考他们真正在意的是什么。\n# 讨论\n应该是显而易见的，这并不是意味着回答是一句话的事。我是用这道题来方便地打开话题，去挖掘和找到这个人的内在动力。根据上述的问题和他的回答来帮助我理解这个人和职位的匹配程度。当你自己尝试时，我鼓励你去发展你自己沿着这个问题去更深地发掘候适合选者理想的工作是什么。\n## 卡壳\n有时人们很难抓住大范围问题的核心和他们卡壳了。对于当时的他们来说定义他们想要工作的难度将要让他们压倒，如果这个发生，我会按照正确的步骤去询问上述的问题：\n* 让我们开始一个简单的问题：你想要整天地写代码吗？如果不，你还想要做些什么其它的事情呢？\n* 你是喜欢一个人工作还是加入一个团队一起工作？如果在一个团队中，你将要承担的角色是什么？\n* 你有你想要花费大量时间在它身上的程序语言吗？在程序语言所花费的时间什么比例会让你高兴？\n* 让我们反向思考一下：你绝对不想要做什么？\n* 你有对于你新的工作，你想要花时间去学习的东西吗？\n\n上述的这些问题会让候选者回到正轨上（我从来不会让面试者选择问题）。通过帮助减少工作描述的选项，大多数候选者能够继续沿着下面的路径继续。\n## 我的观点\n我努力做的第一件事是是否一个人的工作描述和他们的技能匹配。如果一位22岁的年轻人告诉我他下周想要成为谷歌的CEO，这可能是他们对他们的技术看法是有缺陷的或者他们并没有真地抓住我正在问什么。在上述的例子中，我会说一些像：“记住，你是在星期一开始这个工作的。你准备好在周一成为谷歌的CEO了吗？”如果他们回答是肯定的，然后我可能会让我自己问他们如何去管理公司，然后心理上会转向等待下一位候选者。\n## 独立者 VS 管理者\n我曾经为独立贡献者(IC)位置招聘人，并且也问了这个问题，目的只是他们真的想成为一个管理者。有时申请经理职位的人还真的想成为一位IC。这是一个真实且重要的数据点，因为当他们处在一个自己没有憧憬的职位上时，他们可能会不高兴，并且可能会制造出打的或小的问题、所以如果我有任何暗示，他们都可能不会申请正确的角色，我清晰地问他们，“这个理想的工作是在管理上吗？”或者，“这个理想的工作没有管理的责任吗？”\n## 领导 VS 追随者\n在相对于IC vs 经理稍微不同的是一个人是否是领导人或者追随者。这有一个狡猾的部分：领导者可能告诉你他们认为他们可以，而追随者机会从来不会告诉你他们更愿意追随。当然，你也不能真地直接问他们，因为没有人想要考虑成为一个追随者，所以每个人都将要说他们是一个领导。我已经发现最好只是听他们说和做一个决定。我在确定某人是否是领导者时所用的关键词是：\n* 我喜欢帮助别人\n* 我感觉我有很多的经验分享\n* 我不介意/我喜欢辅导别人\n随便提一下，如果你想着你通过使用这些词可以骗别人你想成为领导，但是你错了。他们只是更加深入的指标，你不将要骗到想要知道他们正在做的某个人。\n**重点：**领导者和追随者对于一个健康的团队都是重要的。同样重要的是确保你将人和角色可以正确匹配。将追随者放到领导人的位置对每个人都是难以置信的损害，另外将领导放到员工的位置上将要导致不愉快。目标不是淘汰追随者，而是确保你正在有效地将人安排到了正确的位置。\n**花费的时间**\n在讨论中的几个点钟，我通常问人们他们想要在任何特定的任务所分配的时间长短。他们会在代码工作和管理工作上对半分吗？他们是想要花费70%在架构设计和30%在写代码吗？在想要花费10%的时间（像，其它时间待在游戏了）去写代码他们会是经理吗？对于对一个人的理解，这些所有的都是重要。\n## 结论\n在这个问题的结尾，我重复一遍候选人告诉我的。像：\n> 好的，所以你看一下是否我是正确的。在你的理想的工作，你想要花费一天的75%写代码(JavaScript)和25%的时间和别人讨论技术和代码。你宁愿在一个5个人的团队和你想要更优经验的人辅导你。对吗？\n\n如果我说错了，我会问他们正确的，让我有一个好的理解，一旦我有正确的答案，然后我向他们说明我为什么问这个问题，通常下面的答复：\n> 我向人们问这个问题的原因是因为我认为将人们放在正确的职位上这是重要的。我想要了解你和你的职场目标能够确认我们有一个更适合你的职位。现在我将要告诉你我正在找的是什么和我们可以共同决定是否我们有合适的为了你的职位。你听懂了吗？\n。。。\nAt that point, I describe what the job they're applying for is like. I talk about the areas in which it is different from what they described and the areas in which it matches. Then, I offer my perspective on whether there's a fit and I ask them for theirs. This usually ends up in one of several paths:\n\nIt sounds to me like this isn't a great match for what you're looking for. Do you agree?\nFrom what you've described, this seems like a job that mostly matches what you're looking for. What do you think?\nIt seems like this job is exactly what you're looking for. Do you agree?\nWhen there's a good fit, the candidate feels better about continuing in the process because of this exercise. They understand that I'm not saying this is a great position for them to try to blindly sell them, but that I really understand what they're looking for and can honestly say I think it's a good fit.\n\nI've never once had an argument with someone when I suggested it seemed like we didn't have a good match. In most cases, the candidates have thanked me for the exercise because it helped them really narrow in on what they're passionate about and what type of job they should be looking for. A couple times I've encouraged the candidate to apply to a different job at the company that seems more suited for what they're looking for. In all cases, candidates have told me they enjoyed answering the question.\n\n# Summary\n\nI think getting to know a candidate is almost (almost!) more important than evaluating their skills. I've seen a lot of damage caused by hiring people into the wrong position due to mismatched expectations, and I'd like to avoid that at all costs. I also want candidates to know that I'm not trying to sell them something I don't have, nor am I making false promises about their chances of success when hired. Instead, I'm offering a complete view into the job they're applying for and, hopefully, a clearer view of their own goals and preferences.\n\nI can honestly say this is the question I enjoy asking the most because reveal a lot about themselves. I think the key takeaway is that, regardless of the outcome, they feel listened to and that they were given a chance to really express how they see themselves fitting into an organization.\n\nUltimately, I feel that I have a responsibility to both my employer and the candidate to make sure we hire people that are good matches for the positions we have. The answers I receive from this question tell me very quickly how good of a match there is, at which point I feel better about spending more time digging into their credentials and skills. If I could only ask one interview question to every candidate, this would be the one.","slug":"interview","published":1,"updated":"2018-01-13T03:01:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9l0006ucxbx2zt3qvq","content":"<blockquote>\n<p><a href=\"https://www.nczonline.net/blog/2015/09/my-favorite-interview-question/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n</blockquote>\n<p>面试和招聘人是一件很难的事情。招聘这个不适合人的成本是很高的，公司常常是想招聘的人能够短时间而不是在之后一段时间内提供帮助，并且有时都不想等到好的候选人出现的时候。针对这一点，我认为和职位不匹配的人造成的损失比找不上该职位的人更大，我认为应该去优化招聘。<br>\n心中有一个目标，我有一个最喜欢的面试问题，它可以帮助我做招聘的决定并很长时间都不会失效。我确定你们中的一些可能正在想，“哦，不可能，他正在抛弃好的面试问题，因为原有的问题正在失效”。并不是如此。我认为一个好的面试过程是，即使面试者提前知道了这个面试问题，但是它依然是有效的。我将要分享这个特殊的问题，因为我认为通过将注意力集中在对职位期许，它将要帮助每一个人（候选者和面试）。</p>\n<h1 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h1>\n<p>我很少以相同的方式问问题，但是它通常会包含下面的这个问题：</p>\n<blockquote>\n<p>假设你可以在星期一开始设计你的工作。而且你在理想的公司和拥有理想的工作和薪水。你所拥有的一切，是告诉公司，你要在你的工作中做些什么，并且你做到了。你的工作意味着什么？</p>\n</blockquote>\n<p>这个问题第一眼看是很简单的，但是这有一些细节可以帮助你去挖掘面试者一些重要的细节。</p>\n<h2 id=\"星期一开始\"><a class=\"markdownIt-Anchor\" href=\"#星期一开始\"></a> 星期一开始</h2>\n<p>“星期一开始”一个特殊的时间开始工作。很明显我们并没有谈论你希望以后到达的一个位置，而是谈论一个不真实存在的理想工作。如果工作开始在星期一，你是没有时间学习心得技能和获得新的经验。专业上讲，就是现在的你，你需要拿出一份在下周可以有效执行的工作。</p>\n<h2 id=\"理想的公司职位和工资\"><a class=\"markdownIt-Anchor\" href=\"#理想的公司职位和工资\"></a> 理想的公司，职位和工资</h2>\n<p>我先排除了公司，职位和工资的因素，因为有些东西是人们<em>想法</em>中想要的，但是不能真的影响我的决定。很明显除非他是我的员工，负责公司完成在我的控制之外（我也不想让别人说我现在的老板是他们梦寐以求的工作）。我不想去讨论关于他们的头衔，因为他们大多数是没有意义的；我对你想要别人怎么称呼你感兴趣，我想要知道的是你对现在工作的激情。而工资对于每个人有着不同的重要性，而且它特不能告诉我关于这个人太多的东西。是的，我也希望有每年一亿的收入，但是这对于我对候选人的评估没有任何的帮助。<br>\n所以通过说清人们关心这三件事——公司，头衔和工资，这可以是候选者自由地思考他们真正在意的是什么。</p>\n<h1 id=\"讨论\"><a class=\"markdownIt-Anchor\" href=\"#讨论\"></a> 讨论</h1>\n<p>应该是显而易见的，这并不是意味着回答是一句话的事。我是用这道题来方便地打开话题，去挖掘和找到这个人的内在动力。根据上述的问题和他的回答来帮助我理解这个人和职位的匹配程度。当你自己尝试时，我鼓励你去发展你自己沿着这个问题去更深地发掘候适合选者理想的工作是什么。</p>\n<h2 id=\"卡壳\"><a class=\"markdownIt-Anchor\" href=\"#卡壳\"></a> 卡壳</h2>\n<p>有时人们很难抓住大范围问题的核心和他们卡壳了。对于当时的他们来说定义他们想要工作的难度将要让他们压倒，如果这个发生，我会按照正确的步骤去询问上述的问题：</p>\n<ul>\n<li>让我们开始一个简单的问题：你想要整天地写代码吗？如果不，你还想要做些什么其它的事情呢？</li>\n<li>你是喜欢一个人工作还是加入一个团队一起工作？如果在一个团队中，你将要承担的角色是什么？</li>\n<li>你有你想要花费大量时间在它身上的程序语言吗？在程序语言所花费的时间什么比例会让你高兴？</li>\n<li>让我们反向思考一下：你绝对不想要做什么？</li>\n<li>你有对于你新的工作，你想要花时间去学习的东西吗？</li>\n</ul>\n<p>上述的这些问题会让候选者回到正轨上（我从来不会让面试者选择问题）。通过帮助减少工作描述的选项，大多数候选者能够继续沿着下面的路径继续。</p>\n<h2 id=\"我的观点\"><a class=\"markdownIt-Anchor\" href=\"#我的观点\"></a> 我的观点</h2>\n<p>我努力做的第一件事是是否一个人的工作描述和他们的技能匹配。如果一位22岁的年轻人告诉我他下周想要成为谷歌的CEO，这可能是他们对他们的技术看法是有缺陷的或者他们并没有真地抓住我正在问什么。在上述的例子中，我会说一些像：“记住，你是在星期一开始这个工作的。你准备好在周一成为谷歌的CEO了吗？”如果他们回答是肯定的，然后我可能会让我自己问他们如何去管理公司，然后心理上会转向等待下一位候选者。</p>\n<h2 id=\"独立者-vs-管理者\"><a class=\"markdownIt-Anchor\" href=\"#独立者-vs-管理者\"></a> 独立者 VS 管理者</h2>\n<p>我曾经为独立贡献者(IC)位置招聘人，并且也问了这个问题，目的只是他们真的想成为一个管理者。有时申请经理职位的人还真的想成为一位IC。这是一个真实且重要的数据点，因为当他们处在一个自己没有憧憬的职位上时，他们可能会不高兴，并且可能会制造出打的或小的问题、所以如果我有任何暗示，他们都可能不会申请正确的角色，我清晰地问他们，“这个理想的工作是在管理上吗？”或者，“这个理想的工作没有管理的责任吗？”</p>\n<h2 id=\"领导-vs-追随者\"><a class=\"markdownIt-Anchor\" href=\"#领导-vs-追随者\"></a> 领导 VS 追随者</h2>\n<p>在相对于IC vs 经理稍微不同的是一个人是否是领导人或者追随者。这有一个狡猾的部分：领导者可能告诉你他们认为他们可以，而追随者机会从来不会告诉你他们更愿意追随。当然，你也不能真地直接问他们，因为没有人想要考虑成为一个追随者，所以每个人都将要说他们是一个领导。我已经发现最好只是听他们说和做一个决定。我在确定某人是否是领导者时所用的关键词是：</p>\n<ul>\n<li>我喜欢帮助别人</li>\n<li>我感觉我有很多的经验分享</li>\n<li>我不介意/我喜欢辅导别人<br>\n随便提一下，如果你想着你通过使用这些词可以骗别人你想成为领导，但是你错了。他们只是更加深入的指标，你不将要骗到想要知道他们正在做的某个人。<br>\n**重点：**领导者和追随者对于一个健康的团队都是重要的。同样重要的是确保你将人和角色可以正确匹配。将追随者放到领导人的位置对每个人都是难以置信的损害，另外将领导放到员工的位置上将要导致不愉快。目标不是淘汰追随者，而是确保你正在有效地将人安排到了正确的位置。<br>\n<strong>花费的时间</strong><br>\n在讨论中的几个点钟，我通常问人们他们想要在任何特定的任务所分配的时间长短。他们会在代码工作和管理工作上对半分吗？他们是想要花费70%在架构设计和30%在写代码吗？在想要花费10%的时间（像，其它时间待在游戏了）去写代码他们会是经理吗？对于对一个人的理解，这些所有的都是重要。</li>\n</ul>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h2>\n<p>在这个问题的结尾，我重复一遍候选人告诉我的。像：</p>\n<blockquote>\n<p>好的，所以你看一下是否我是正确的。在你的理想的工作，你想要花费一天的75%写代码(JavaScript)和25%的时间和别人讨论技术和代码。你宁愿在一个5个人的团队和你想要更优经验的人辅导你。对吗？</p>\n</blockquote>\n<p>如果我说错了，我会问他们正确的，让我有一个好的理解，一旦我有正确的答案，然后我向他们说明我为什么问这个问题，通常下面的答复：</p>\n<blockquote>\n<p>我向人们问这个问题的原因是因为我认为将人们放在正确的职位上这是重要的。我想要了解你和你的职场目标能够确认我们有一个更适合你的职位。现在我将要告诉你我正在找的是什么和我们可以共同决定是否我们有合适的为了你的职位。你听懂了吗？<br>\n。。。<br>\nAt that point, I describe what the job they’re applying for is like. I talk about the areas in which it is different from what they described and the areas in which it matches. Then, I offer my perspective on whether there’s a fit and I ask them for theirs. This usually ends up in one of several paths:</p>\n</blockquote>\n<p>It sounds to me like this isn’t a great match for what you’re looking for. Do you agree?<br>\nFrom what you’ve described, this seems like a job that mostly matches what you’re looking for. What do you think?<br>\nIt seems like this job is exactly what you’re looking for. Do you agree?<br>\nWhen there’s a good fit, the candidate feels better about continuing in the process because of this exercise. They understand that I’m not saying this is a great position for them to try to blindly sell them, but that I really understand what they’re looking for and can honestly say I think it’s a good fit.</p>\n<p>I’ve never once had an argument with someone when I suggested it seemed like we didn’t have a good match. In most cases, the candidates have thanked me for the exercise because it helped them really narrow in on what they’re passionate about and what type of job they should be looking for. A couple times I’ve encouraged the candidate to apply to a different job at the company that seems more suited for what they’re looking for. In all cases, candidates have told me they enjoyed answering the question.</p>\n<h1 id=\"summary\"><a class=\"markdownIt-Anchor\" href=\"#summary\"></a> Summary</h1>\n<p>I think getting to know a candidate is almost (almost!) more important than evaluating their skills. I’ve seen a lot of damage caused by hiring people into the wrong position due to mismatched expectations, and I’d like to avoid that at all costs. I also want candidates to know that I’m not trying to sell them something I don’t have, nor am I making false promises about their chances of success when hired. Instead, I’m offering a complete view into the job they’re applying for and, hopefully, a clearer view of their own goals and preferences.</p>\n<p>I can honestly say this is the question I enjoy asking the most because reveal a lot about themselves. I think the key takeaway is that, regardless of the outcome, they feel listened to and that they were given a chance to really express how they see themselves fitting into an organization.</p>\n<p>Ultimately, I feel that I have a responsibility to both my employer and the candidate to make sure we hire people that are good matches for the positions we have. The answers I receive from this question tell me very quickly how good of a match there is, at which point I feel better about spending more time digging into their credentials and skills. If I could only ask one interview question to every candidate, this would be the one.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://www.nczonline.net/blog/2015/09/my-favorite-interview-question/\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n</blockquote>\n<p>面试和招聘人是一件很难的事情。招聘这个不适合人的成本是很高的，公司常常是想招聘的人能够短时间而不是在之后一段时间内提供帮助，并且有时都不想等到好的候选人出现的时候。针对这一点，我认为和职位不匹配的人造成的损失比找不上该职位的人更大，我认为应该去优化招聘。<br>\n心中有一个目标，我有一个最喜欢的面试问题，它可以帮助我做招聘的决定并很长时间都不会失效。我确定你们中的一些可能正在想，“哦，不可能，他正在抛弃好的面试问题，因为原有的问题正在失效”。并不是如此。我认为一个好的面试过程是，即使面试者提前知道了这个面试问题，但是它依然是有效的。我将要分享这个特殊的问题，因为我认为通过将注意力集中在对职位期许，它将要帮助每一个人（候选者和面试）。</p>\n<h1 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h1>\n<p>我很少以相同的方式问问题，但是它通常会包含下面的这个问题：</p>\n<blockquote>\n<p>假设你可以在星期一开始设计你的工作。而且你在理想的公司和拥有理想的工作和薪水。你所拥有的一切，是告诉公司，你要在你的工作中做些什么，并且你做到了。你的工作意味着什么？</p>\n</blockquote>\n<p>这个问题第一眼看是很简单的，但是这有一些细节可以帮助你去挖掘面试者一些重要的细节。</p>\n<h2 id=\"星期一开始\"><a class=\"markdownIt-Anchor\" href=\"#星期一开始\"></a> 星期一开始</h2>\n<p>“星期一开始”一个特殊的时间开始工作。很明显我们并没有谈论你希望以后到达的一个位置，而是谈论一个不真实存在的理想工作。如果工作开始在星期一，你是没有时间学习心得技能和获得新的经验。专业上讲，就是现在的你，你需要拿出一份在下周可以有效执行的工作。</p>\n<h2 id=\"理想的公司职位和工资\"><a class=\"markdownIt-Anchor\" href=\"#理想的公司职位和工资\"></a> 理想的公司，职位和工资</h2>\n<p>我先排除了公司，职位和工资的因素，因为有些东西是人们<em>想法</em>中想要的，但是不能真的影响我的决定。很明显除非他是我的员工，负责公司完成在我的控制之外（我也不想让别人说我现在的老板是他们梦寐以求的工作）。我不想去讨论关于他们的头衔，因为他们大多数是没有意义的；我对你想要别人怎么称呼你感兴趣，我想要知道的是你对现在工作的激情。而工资对于每个人有着不同的重要性，而且它特不能告诉我关于这个人太多的东西。是的，我也希望有每年一亿的收入，但是这对于我对候选人的评估没有任何的帮助。<br>\n所以通过说清人们关心这三件事——公司，头衔和工资，这可以是候选者自由地思考他们真正在意的是什么。</p>\n<h1 id=\"讨论\"><a class=\"markdownIt-Anchor\" href=\"#讨论\"></a> 讨论</h1>\n<p>应该是显而易见的，这并不是意味着回答是一句话的事。我是用这道题来方便地打开话题，去挖掘和找到这个人的内在动力。根据上述的问题和他的回答来帮助我理解这个人和职位的匹配程度。当你自己尝试时，我鼓励你去发展你自己沿着这个问题去更深地发掘候适合选者理想的工作是什么。</p>\n<h2 id=\"卡壳\"><a class=\"markdownIt-Anchor\" href=\"#卡壳\"></a> 卡壳</h2>\n<p>有时人们很难抓住大范围问题的核心和他们卡壳了。对于当时的他们来说定义他们想要工作的难度将要让他们压倒，如果这个发生，我会按照正确的步骤去询问上述的问题：</p>\n<ul>\n<li>让我们开始一个简单的问题：你想要整天地写代码吗？如果不，你还想要做些什么其它的事情呢？</li>\n<li>你是喜欢一个人工作还是加入一个团队一起工作？如果在一个团队中，你将要承担的角色是什么？</li>\n<li>你有你想要花费大量时间在它身上的程序语言吗？在程序语言所花费的时间什么比例会让你高兴？</li>\n<li>让我们反向思考一下：你绝对不想要做什么？</li>\n<li>你有对于你新的工作，你想要花时间去学习的东西吗？</li>\n</ul>\n<p>上述的这些问题会让候选者回到正轨上（我从来不会让面试者选择问题）。通过帮助减少工作描述的选项，大多数候选者能够继续沿着下面的路径继续。</p>\n<h2 id=\"我的观点\"><a class=\"markdownIt-Anchor\" href=\"#我的观点\"></a> 我的观点</h2>\n<p>我努力做的第一件事是是否一个人的工作描述和他们的技能匹配。如果一位22岁的年轻人告诉我他下周想要成为谷歌的CEO，这可能是他们对他们的技术看法是有缺陷的或者他们并没有真地抓住我正在问什么。在上述的例子中，我会说一些像：“记住，你是在星期一开始这个工作的。你准备好在周一成为谷歌的CEO了吗？”如果他们回答是肯定的，然后我可能会让我自己问他们如何去管理公司，然后心理上会转向等待下一位候选者。</p>\n<h2 id=\"独立者-vs-管理者\"><a class=\"markdownIt-Anchor\" href=\"#独立者-vs-管理者\"></a> 独立者 VS 管理者</h2>\n<p>我曾经为独立贡献者(IC)位置招聘人，并且也问了这个问题，目的只是他们真的想成为一个管理者。有时申请经理职位的人还真的想成为一位IC。这是一个真实且重要的数据点，因为当他们处在一个自己没有憧憬的职位上时，他们可能会不高兴，并且可能会制造出打的或小的问题、所以如果我有任何暗示，他们都可能不会申请正确的角色，我清晰地问他们，“这个理想的工作是在管理上吗？”或者，“这个理想的工作没有管理的责任吗？”</p>\n<h2 id=\"领导-vs-追随者\"><a class=\"markdownIt-Anchor\" href=\"#领导-vs-追随者\"></a> 领导 VS 追随者</h2>\n<p>在相对于IC vs 经理稍微不同的是一个人是否是领导人或者追随者。这有一个狡猾的部分：领导者可能告诉你他们认为他们可以，而追随者机会从来不会告诉你他们更愿意追随。当然，你也不能真地直接问他们，因为没有人想要考虑成为一个追随者，所以每个人都将要说他们是一个领导。我已经发现最好只是听他们说和做一个决定。我在确定某人是否是领导者时所用的关键词是：</p>\n<ul>\n<li>我喜欢帮助别人</li>\n<li>我感觉我有很多的经验分享</li>\n<li>我不介意/我喜欢辅导别人<br>\n随便提一下，如果你想着你通过使用这些词可以骗别人你想成为领导，但是你错了。他们只是更加深入的指标，你不将要骗到想要知道他们正在做的某个人。<br>\n**重点：**领导者和追随者对于一个健康的团队都是重要的。同样重要的是确保你将人和角色可以正确匹配。将追随者放到领导人的位置对每个人都是难以置信的损害，另外将领导放到员工的位置上将要导致不愉快。目标不是淘汰追随者，而是确保你正在有效地将人安排到了正确的位置。<br>\n<strong>花费的时间</strong><br>\n在讨论中的几个点钟，我通常问人们他们想要在任何特定的任务所分配的时间长短。他们会在代码工作和管理工作上对半分吗？他们是想要花费70%在架构设计和30%在写代码吗？在想要花费10%的时间（像，其它时间待在游戏了）去写代码他们会是经理吗？对于对一个人的理解，这些所有的都是重要。</li>\n</ul>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h2>\n<p>在这个问题的结尾，我重复一遍候选人告诉我的。像：</p>\n<blockquote>\n<p>好的，所以你看一下是否我是正确的。在你的理想的工作，你想要花费一天的75%写代码(JavaScript)和25%的时间和别人讨论技术和代码。你宁愿在一个5个人的团队和你想要更优经验的人辅导你。对吗？</p>\n</blockquote>\n<p>如果我说错了，我会问他们正确的，让我有一个好的理解，一旦我有正确的答案，然后我向他们说明我为什么问这个问题，通常下面的答复：</p>\n<blockquote>\n<p>我向人们问这个问题的原因是因为我认为将人们放在正确的职位上这是重要的。我想要了解你和你的职场目标能够确认我们有一个更适合你的职位。现在我将要告诉你我正在找的是什么和我们可以共同决定是否我们有合适的为了你的职位。你听懂了吗？<br>\n。。。<br>\nAt that point, I describe what the job they’re applying for is like. I talk about the areas in which it is different from what they described and the areas in which it matches. Then, I offer my perspective on whether there’s a fit and I ask them for theirs. This usually ends up in one of several paths:</p>\n</blockquote>\n<p>It sounds to me like this isn’t a great match for what you’re looking for. Do you agree?<br>\nFrom what you’ve described, this seems like a job that mostly matches what you’re looking for. What do you think?<br>\nIt seems like this job is exactly what you’re looking for. Do you agree?<br>\nWhen there’s a good fit, the candidate feels better about continuing in the process because of this exercise. They understand that I’m not saying this is a great position for them to try to blindly sell them, but that I really understand what they’re looking for and can honestly say I think it’s a good fit.</p>\n<p>I’ve never once had an argument with someone when I suggested it seemed like we didn’t have a good match. In most cases, the candidates have thanked me for the exercise because it helped them really narrow in on what they’re passionate about and what type of job they should be looking for. A couple times I’ve encouraged the candidate to apply to a different job at the company that seems more suited for what they’re looking for. In all cases, candidates have told me they enjoyed answering the question.</p>\n<h1 id=\"summary\"><a class=\"markdownIt-Anchor\" href=\"#summary\"></a> Summary</h1>\n<p>I think getting to know a candidate is almost (almost!) more important than evaluating their skills. I’ve seen a lot of damage caused by hiring people into the wrong position due to mismatched expectations, and I’d like to avoid that at all costs. I also want candidates to know that I’m not trying to sell them something I don’t have, nor am I making false promises about their chances of success when hired. Instead, I’m offering a complete view into the job they’re applying for and, hopefully, a clearer view of their own goals and preferences.</p>\n<p>I can honestly say this is the question I enjoy asking the most because reveal a lot about themselves. I think the key takeaway is that, regardless of the outcome, they feel listened to and that they were given a chance to really express how they see themselves fitting into an organization.</p>\n<p>Ultimately, I feel that I have a responsibility to both my employer and the candidate to make sure we hire people that are good matches for the positions we have. The answers I receive from this question tell me very quickly how good of a match there is, at which point I feel better about spending more time digging into their credentials and skills. If I could only ask one interview question to every candidate, this would be the one.</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-09-14T13:00:51.000Z","updated":"2017-09-14T13:00:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9s0008ucxb19kq1cyg","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"cookie","date":"2017-10-11T10:21:07.000Z","_content":"主\n# cookie是什么\nHTTP是一个无状态的协议，即服务器不清楚是不是同一个浏览器在访问它，cookie之前通过请求中带着token实现的","source":"_posts/cookie.md","raw":"---\ntitle: cookie\ndate: 2017-10-11 18:21:07\ntags:\n---\n主\n# cookie是什么\nHTTP是一个无状态的协议，即服务器不清楚是不是同一个浏览器在访问它，cookie之前通过请求中带着token实现的","slug":"cookie","published":1,"updated":"2017-10-23T05:05:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvlah9u0009ucxbvknyrof9","content":"<p>主</p>\n<h1 id=\"cookie是什么\"><a class=\"markdownIt-Anchor\" href=\"#cookie是什么\"></a> cookie是什么</h1>\n<p>HTTP是一个无状态的协议，即服务器不清楚是不是同一个浏览器在访问它，cookie之前通过请求中带着token实现的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主</p>\n<h1 id=\"cookie是什么\"><a class=\"markdownIt-Anchor\" href=\"#cookie是什么\"></a> cookie是什么</h1>\n<p>HTTP是一个无状态的协议，即服务器不清楚是不是同一个浏览器在访问它，cookie之前通过请求中带着token实现的</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjcvlah9j0005ucxbb8b98xij","tag_id":"cjcvlah9o0007ucxb1dvxk82s","_id":"cjcvlah9w000aucxbzpt2atof"}],"Tag":[{"name":"面试","_id":"cjcvlah9o0007ucxb1dvxk82s"}]}}